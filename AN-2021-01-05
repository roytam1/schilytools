New features with AN-2021-01-05:

This is the first localization step for the schily source consolidation. Many
programs now (hopefully) call gettext() for all strings that need localization.

-	The next step will include dgettext() calls for the libraries and the
	missing programs

-	The following step will include the extracted strings

-	The last step will include German translations and install support
	for the resulting binary message object files.

----------> Please test and report compilation problems! <---------

***** NOTE: As mentioned since 2004, frontends to the tools should *****
*****		call all programs in the "C" locale		   *****
*****		by e.g. calling: LC_ALL=C cdrecord ....		   *****
*****		unless these frontends support localized strings   *****
*****		used by the cdrtools with NLS support.		   *****

		*** WARNING        ***
		*** Need new smake ***

	*** Due to the fact that schily-tools 2014-04-03 introduced to use new macro
	*** expansions and a related bug fix in smake, you need a newer smake
	*** to compile this source. If your smake is too old and aborts, ensure to
	*** use the recent smake by calling:

	cd ./psmake
	./MAKE-all
	cd ..
	psmake/smake
	psmake/smake install

	The new smake version mentioned above is smake-1.2.4
	The recent smake version is smake-1.3

	*** Due to the fact that schily-tools 2018-01-26 introduced
	*** optimizations for the Schily version of SunPro Make, you
	*** need at least the dmake version from 2018/01/11 with support
	*** for the "export" directive to compile with this makefile system.

For the beginning of the list of new features of the software in this tarball, 
please scroll down to "NEW FEATURES"

	WARNING: the new version of the isoinfo program makes use of the 
		*at() series of functions that have been introduced by Sun
		in August 2001 and added to POSIX.1-2008. For older platforms,
		libschily now includes emulations for these functions but
		these emulations have not yet been tested thoroughly.
		Please report problems!

	BUG WARNING: Please never report bugs only to Linux distributions as
		they usually do not forward these bug reports upstream and as
		the Linux distributions typically do not let skilled people
		check the bugs. We did not hear about a FIFO problem in star
		for a long time. Then a problem on Linux occurred once
		every 6000-10000 tries but it did not happen on Solaris after
		even 10 million tries, so it was not known besides Linux.

	BUG WARNING: *** GNU make *** starts too early with parallel
		execution (when reading Makefiles and evaluating rules for
		"include" statements already). Since GNU make does not
		support a concept for a correct ordering of such actions,
		you need to be prepared to see gmake fail in parallel
		mode. If you are interested in reliable parallel execution,
		it is recommended to use the included "dmake" program with
		a command line like:

			dmake -j10 -f SMakefile

		from the top level directory. Note that if you are on Linux,
		you need a halfway recent kernel or the compile time will not
		go down because of the low POSIX semaphore performance in
		older Linux kernels.

		The "dmake" program included in the schilytools tarball is the
		current version of the "new" SunOS make program that has been
		introduced in January 1986 by Sun Microsystems. It also
		introduced new features like the "include" directive that
		3 years later have been copied by gmake in a partially buggy
		way. As gmake does not fix showstopper bugs, it cannot be
		supported. Current showstoppers are: 1) gmake executes
		"include" related rules in the inverse order, causing rules
		to fail if they depend on files created by an "earlier" action
		2) gmake caches an outdated state of the directory and aborts
		with a wrong complain about allegedly missing files that in
		fact exist already.

NEW FEATURES:

-	OpenCSW pakaging: added an override for opt/csw/bin/vctags

-	Schily Makefilesystem: Added the file RULES/mk-bsdmake.id
	Note that the support for 'bmake' is still not ready. Being not yet
	ready is currently a result of missing support for pattern rules and
	that missing feature would make it hard to implement platform specific
	object sub-directories.

	If bmake would add pattern rules as a result of a new POSIX standard
	that includes pattern rules, bmake would most likely become useful for
	portable build systems.

-	Schily Makefilesystem: Updated makefiles.tar.bz2, see above, this
	was because RULES/mk-bsdmake.id is now included.

-	libxtermcap: We now install our own termcap database file in

		/opt/schily/etc/termcap

	This helps to deal with unfriendly Linux distros that do not provide
	a /etc/termcap database file

	WARNING: we are currently using the unmodified termcap database file
	from FreeBSD-13 that has several bugs. See the termcap compiler
	termcap(1) from schilytools. Call:

		termcap if=libxtermcap/termcap > outfile

	to get a list of the bugs.

	Note that the termcap data base file has been made a part of libxtermcap
	in order to make sure that all users of libxtermcap will get the file.

-	libxtermcap: tgetent() by default (if TERMPATH is not set) now searches 
	the termcap file in:

		~/.termcap /etc/termcap /opt/schily/etc/termcap

	This results in a fallback to our own termcap file if the system termcap
	file is missing. This makes it now easier to use ved/p/bsh/Bourne Shell
	on Linux, where the termcap database is missing.

	IMPORTANT: If you are using the screen(1) program to emulate several
	virtual login sessions, there is no need to have a termcap data base
	file in /etc/termcap or /opt/schily/etc/termcap because screen(1)
	exports the environment variables TERM and TEMRCAP in a way that it
	contains a valid description for the emulated terminal that can be
	used directly by libxtermcap.

-	ved: fixed a typo in the man page

-	ved: Added a "SOURCE DOWNLOAD" section to the man page

-	cal: Ultrix has a completely non-standard langinfo.h that #defines
	things like MON_1 to be a string instead of a number.

	A POSIX compliant langingfo.h #defines YESEXPR. Fortunately this is
	not the case on Ultrix, so we can detect that Ultrix problem from a
	missing YESEXPR #define and work around it.

-	Bourne Shell: When we introduced ${.sh.path} in February 2020, we did
	use the "new" and POSIX-only function realpath() that is not present
	on e.g. Ultrix. We now use abspath() from libschily if realpath() is
	missing.

	Note that abspath() is better than realpath(), as it supports path
	names longer than PATH_MAX, but since ${.sh.path} is only used to
	return the absolute pathname for the current shell binary, this is
	not a problem and on the other side, we can avoid linking against
	libschily this way, so shell scripting with lazy linking is faster
	since less libraries need to be linked at startup.

-	SunPro Make: Ultrix does not use prototypes in the cast contained
	in the SIG_IGN #define and that is not compatible with C++. We now 
	enforce the pre-POSIX workaround cast originally from SunOS-4.x for
	Ultrix as well.

-	SunPro Make: Ultrix does not #include <sys/types.h> from unistd.h, so
	we need to #include <schily/unistd.h> from
	sunpro/Make/lib/vroot/src/truncate.cc to make that file compile.

-	patch: call unlink(to) before trying to copy a /tmp/ file with the
	patch result back to the real file name. This permits to patch
	readonly files in the same way as done by "gpatch" (GNU patch).

-	cdda2wav: The new main configure concept made the script
	cdda2wav/configure out of date but we forgot to publish an updated
	version. This caused cdda2wav to fail to build on platforms without
	a modern awk program.

	Note that we usually supply pre-created configure scripts _and_ the
	rules and dependencies for the configure scripts. If the pre-created 
	configure scripts are not up to date, they are created automatically
	by a rule from the makefile system, but this only works on plaftorms
	that provide a halfway modern m4 and awk program.

	Thanks to a hint from  Rudi Blom

-	Ultrix port in general: we still cannot use the Ultrix compiler and
	need gcc because the Ultrix compiler dumps core when compiling some
	of the C-sources from this tarball and since SunPro Make needs a C++
	compiler and it seems that this C++ compiler is missing from the
	Ultrix compiler suite.


SCCS THOUGHTS:

-	SCCS: The current idea for converting a historic SCCS project into
	a project oriented SCCS history bundle is the following:

	-	Create a user map file for "sccslog" by calling:

		mkdir $HOME/.sccs
		$EDITOR $HOME/.sccs/usermap

		Enter the UNIX login names followed by a TAB, followed
		by an E-mail notation. Use one line per user, e.g.

			joerg	J. Schilling <joerg@mail.com>

	-	Create a copy of the whole project to work on for this test.
		Do not do this conversion on the original project until
		sccs-6.0 is ready.

	-	chdir to the project home directory of the just created copy.

	-	Call "sccs init -i ." to make the project using an in-tree
		project oriented repository.

	-	Call:

		find * -path '*SCCS/s.*' | /opt/schily/ccs/bin/sccscvt -NSCCS/s. -k -ooo -V6 -

		for the CSRG BSD project use:

		find * -path '*SCCS/s.*' | TZ=US/Pacific /opt/schily/ccs/bin/sccscvt -NSCCS/s. -k -ooo -V6 -

		to convert all history files into SCCSv6 history files. The
		TZ=US/Pacific is important for the UCB conversion since SCCSv6
		uses timezones but SCCSv4 does not and we need to have the 
		correct timezone entries in the SCCSv6 history files.

		For the complete "schilytools" project with 4200 SCCS history
		files in 55 Mbytes, this takes 12 seconds for the SCCS history
		from 1984 .. 2020, but note that most of the edits from the
		1980s are lost, so there are few entries from the time
		before 1989.

		An alternate example: the SCCS history from the BSD-4.4 project
		from December 1979 up to June 1995 is in 12600 SCCS history
		files that take up 125 MB.
		The conversion time to the SCCSv6 history file format is
		18 seconds.

	-	Call:

		find * -path '*SCCS/s.*' | /opt/schily/ccs/bin/sccslog -changeset -

		to populate the changeset file from the existing deltas.

		For the complete "schilytools" project with 19600 commits,
		this takes 8 minutes. The resulting file .sccs/SCCS/s.changeset
		has a size of approx. 7 MBytes.

		An alternate example: the SCCS history from the BSD-4.4 project
		from December 1979 up to June 1995 has approx. 47000 commits.
		The conversion time is approx. 40 minutes.
		The size of the resulting changeset file is approx. 14 MBytes.

	-	convert the in-tree repository into an off-tree repository.
		This final step is not yet needed and there is currently no
		code to do that automatically.

	-	If you like to check the resulting changeset file, there is
		currently only one way to look at it, by calling:

		sccs -O get -p -A -m .sccs/SCCS/s.changeset | more

		This prints an annotated version of the changeset file.
		The next task is to develop an enhancement to "sccs log"
		that prints the changeset in a way similar to what "hg log -v"
		prints.

	-	NOTE: Normal filesystems on Linux are slow, it is advised to
		make the conversions on tmpfs for performance reasons in case
		you are using Linux.

	Please however keep in mind that this is still experimental and there is
	absolutely no grant that a changelog created with current experimental
	software will work correctly with the final SCCS version. The procedure
	is just an example to check how it may look like.

	The final conversion method will be more automated... most likely
	by a command similar to "sccs import ..."

	IMPORTANT: This is not yet the time to finally convert a project into
	the project mode, because the project would be stuck in the current 
	state. What we need to continue work in that repository state in the
	project mode is at least a working "sccs commit". Be prepared to remove
	the changeset history file once "sccs commit" works and to re-create
	the changeset file for that time.

 

-	SCCS TODO:

	-	Activate "fsdiff" as a "bdiff" replacement in delta(1)
		to speed up delta(1) and to reduce the size of the SCCS
		history files.

	-	Implement something that outputs similar information from
		the changeset file as printed with "hg log -v".

		This would be the next key feature.

	-	verify whether sccs.c uses -NSCCS in the back end programs
		correctly, instead of converting g-file names from the command
		line into s.file names in the frontend in order to forward 
		s.file names to the backend programs. This is needed for an
		off-tree repository.

		The related unit tests are already passed.

	-	Add code to to sccs(1) to send a list of files to admin(1) and
		delta(1) with new or modified files in order to have all
		important code for a "sccs commit" in a single program that
		does not need to deal with ARG_MAX limitations.

	-	Add code to admin(1), delta(1), sccs-log(1) and get(1) to 
		maintain/understand the changeset file.

		This is mainly writing out the sccschangeset(4) entries to an
		intermediate store if a single file has been treated
		successfully. For sccs-log(1), see below.

	-	Finish the work to allow normal line based diffs in SCCS even
		for binary files. This are files that include nul bytes and
		this needs to completely avoid fputs() and this needs an 
		initialized member p_line_length in struct packet even for 
		all content that does not result from a previous getline() call.

	-	sccs -R tell (and probably other subcommands?) does not yet
		work in NewMode

	-	Add code to libcomobj to understand the changeset file.
		This is needed in order to e.g. know the file names and file
		specific SIDs/state that corresponds to a project global SID.

	-	Find/verify a complete transactional model that allows to repair
		complex changes to the set of files for a project that have
		been aborted in the middle. The current idea is to create the
		file $PROJECTHOME/.sccs/changeset with the deltas to the
		changeset during a complex update operation.

	-	Find a decision on how to deal with the admin flags that are
		currently implemented as global flags and thus do not depend on
		the SID (version) if the history file.

	-	Aborting a transaction via ^C currently requires a manual
		removal of the global lock file. Find a way to avoid this in
		case that a commit has been aborted while being prompted for
		a commit message (which is before any real action happened).

	-	Implement a fully automated method to convert a SCCSv4 based
		history with unrelated history files into a new SCCSv6 based
		project mode history with a populated changeset history file.

		This will most likely be done as a variant of the to be defined
		new command "sccs sccsimport" that imports a whole existing old
		SCCS project.

	-	Implement this "sccs sccsimport" based conversion in a way where
		sccs(1) holds the global changeset lock for the whole time
		of the conversion.




-	Bourne Shell Missing features for POSIX compliance:

	- Support for $'...' quoting (this is not needed for the current
					version of POSIX but for the next POSIX
					version that will be named SUSv8).
					The development of SUSv8 will start in
					late 2016.

	We are now expecting the Bourne Shell to be fully POSIX compliant.

-	Bourne Shell further TODO list:

	-	Finish loadable builtin support.

	-	POSIX does not allow us to implement ". -h", so we will
		add a "source" builtin to be able to implement "source -h"

-	The following builtins (that are available in bsh) are still missing in
	the Bourne Shell:

	err			echo with output going to stderr
	glob			echo with '\0' instead of ' ' between args
	env			a builtin version of /usr/bin/env

	The following bsh intrinsics are still missing in the Bourne Shell:

	-			the restricted bsh has restriction features that
				are missing in the Bourne shell.

	-	source -h	read file into history but do not execute

	and probably more features not yet identified to be bsh unique.



Author:

Joerg Schilling
D-13353 Berlin
Germany

Email: 	joerg@schily.net

Please mail bugs and suggestions to me.
