'\" te
.rn '' }`
''' $Header: patch.man,v 2.0.1.2 88/06/22 20:47:18 lwall Locked $
. \"
. \" @(#)patch.1	1.28 19/12/08 Copyr 2011-2018 J. Schilling
. \"  Manual page for patch
. \"
''' 
''' $Log:	patch.man,v $
''' Revision 2.0.1.2  88/06/22  20:47:18  lwall
''' patch12: now avoids Bell System Logo
''' 
''' Revision 2.0.1.1  88/06/03  15:12:51  lwall
''' patch10: -B switch was contributed.
''' 
''' Revision 2.0  86/09/17  15:39:09  lwall
''' Baseline for netwide release.
''' 
''' Revision 1.4  86/08/01  19:23:22  lwall
''' Documented -v, -p, -F.
''' Added notes to patch senders.
''' 
''' Revision 1.3  85/03/26  15:11:06  lwall
''' Frozen.
''' 
''' Revision 1.2.1.4  85/03/12  16:14:27  lwall
''' Documented -p.
''' 
''' Revision 1.2.1.3  85/03/12  16:09:41  lwall
''' Documented -D.
''' 
''' Revision 1.2.1.2  84/12/05  11:06:55  lwall
''' Added -l switch, and noted bistability bug.
''' 
''' Revision 1.2.1.1  84/12/04  17:23:39  lwall
''' Branch for sdcrdcf changes.
''' 
''' Revision 1.2  84/12/04  17:22:02  lwall
''' Baseline version.
''' 
.if t .ds a \v'-0.55m'\h'0.00n'\z.\h'0.40n'\z.\v'0.55m'\h'-0.40n'a
.if t .ds o \v'-0.55m'\h'0.00n'\z.\h'0.45n'\z.\v'0.55m'\h'-0.45n'o
.if t .ds u \v'-0.55m'\h'0.00n'\z.\h'0.40n'\z.\v'0.55m'\h'-0.40n'u
.if t .ds A \v'-0.77m'\h'0.25n'\z.\h'0.45n'\z.\v'0.77m'\h'-0.70n'A
.if t .ds O \v'-0.77m'\h'0.25n'\z.\h'0.45n'\z.\v'0.77m'\h'-0.70n'O
.if t .ds U \v'-0.77m'\h'0.30n'\z.\h'0.45n'\z.\v'0.77m'\h'-.75n'U
.if t .ds s \(*b
.if t .ds S SS
.if n .ds a ae
.if n .ds o oe
.if n .ds u ue
.if n .ds s sz
.de Sh
.br
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.ie n \{\
.tr \(*W-\*(Tr
.ds -- \(*W-
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br \}
.el \{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
'br\}
.TH PATCH 1 "2019/12/08"
.SH NAME
patch - a program for applying a diff file to an original
.SH SYNOPSIS
.B patch
.I [options]
.I orig
.sp
.B spatch
.I [options]
.I orig
.sp
.B opatch
.I [options]
.I orig
.I patchfile
.I "[+ [options] orig]
.sp
.B sccspatch
.I [options]
.I orig
.sp
.SS POSIX
.B patch 
.RB [ -blNR ]
.RB [ "\-c " |
.BR "\-e " |
.BR "\-n " |
.BR \-u  ]
.RB [ \-d
.IR dir ]
.RB [ \-D
.IR define ]
.br
.RB "     [" \-i
.IR patchfile ]
.RB [ \-o
.IR outfile ]
.RB [ \-p
.IR num ]
.RB [ \-r
.IR rejectfile ]
.br
.RI "     [" file ]

.SS but usually just
.sp
.B patch
.RI < patchfile
.SH DESCRIPTION
.B Patch
will take a patch file containing any of the four forms of difference
listing produced by the
.B diff
program and apply those differences to an original file, producing a patched
version.
By default, the patched version is put in place of the original and no backup
is made.
The
.B \-b
switch tells
.B patch
to create a backup file.
You may also specify where you want the output to go with a
.B \-o
switch.
If
.I patchfile
is omitted, or is a hyphen, the patch will be read from standard input.
.LP
.B patch
attempts to determine the type of the
.B diff
listing,
unless overruled by a
.BR -c ,
.BR -e ,
or
.B -n
option.
.LP
If the patch file contains more than one patch,
.B patch
attempts to
apply each of them as if they came from separate patch files. (In this case
the name of the patch file must be determinable for each
.B diff
listing.)
.PP
By default, this version of
.B patch
is in strict POSIX mode and does not permit extensions.
If
.B patch
is called as
.BR opatch ,
it behaves like the original
.B patch
utility from Larry Wall (except for 
.BR "filename determination" )
but with new additional features enabled.
The names
.B sccspatch
and 
.B spatch
may be used to select
.B "POSIX patch"
behavior with extensions from Larry Wall and extensions from recent development.

.SH OPTIONS
.PP
.B Patch
recognizes the following switches:
.TP 9
.B \-b
Save a copy of the original contents of each modified file, before the 
differences are applied, in a file of the same name with the suffix
.B .orig
appended to it. If the file already exists, it is overwritten.
If multiple patches are applied to the same file, the
.B .orig
file is written only for the first patch. When the
.BI \-o " outfile
option is also specified, file
.B .orig
is not created but, if outfile already exists, outfile
.B .orig
is created.
.sp
The original behavior of the
.B \-b
option as found in the original
.B patch
from Larry Wall is available with the
.B \-z
option.
.TP
.B \-B
causes the next argument to be interpreted as a prefix to the backup file
name. If this argument is specified any argument from 
.B \-z
will be ignored.
For example, with
.B -B /old/
the backup file name for
.B src/patch/util.c
is
.BR /old/src/patch/util.c .
.sp
This argument is an extension to Larry Wall's patch v2.0.1.4, patchlevel 8,
made by M. Greim (greim@sbsvax.uucp).
.sp
This option is not available in strict POSIX mode.
.TP
.B \-c
forces
.B patch
to interpret the patch file as a context diff.
.TP
.BI \-d " dir
causes
.B patch
to interpret the next argument as a directory, and cd to it before doing
anything else.
.TP
.BI \-D " define
causes
.B patch
to use the
.BI "#ifdef" " define\fR..." "#endif"
construct to mark changes.
The argument following 
.B \-D
will be used as the differentiating symbol.
.TP
.B \-E
Remove output files that are empty after patching.
If the patch is in the
.B unified context diff
format and the diff header contains a correct zero time stamp
for the removed file, this option is not needed.
A
.B unified context diff
created by
.B diff \-Nur
marks removed files by including a time that refers
to the beginning of the year 1970 UTC like in the following
example diff output header:
.nf
\fB
\-\-\- old/Makefile          2011-01-25 12:08:18 +0100
+++ new/Makefile          1970-01-01 01:00:00 +0100
@@ \-1,18 +0,0 @@
\fP
.fi
The zero time stamp is only recognized in case the time stamp
is printed in the format required by POSIX for unified diffs
as in the example above or with added sub second time information.
.sp
This option is not available in strict POSIX mode.
.TP
.B \-e
forces
.B patch
to interpret the patch file as an ed script.
.TP
.B \-f
forces
.B patch
to assume that the user knows exactly what he or she is doing, and to not
ask any questions.
It does not suppress informational messages, however.
Use
.B \-s
for that.
.sp
This option is not available in strict POSIX mode.
.TP
.BI \-F number
sets the maximum fuzz factor.
This switch only applies to context diffs, and causes
.B patch
to ignore up to that many lines in looking for places to install a hunk.
Note that a larger fuzz factor increases the odds of a faulty patch.
The default fuzz factor is 2, and it may not be set to more than
the number of lines of context in the context diff, ordinarily 3.
.ne 10
.sp
This option is not available in strict POSIX mode.
.TP
.BI \-i " patchfile
Reads the patch information from the file named by the path name
.IR patchfile ,
rather than the standard input.
.TP
.B \-l
causes the pattern matching to be done loosely, in case the tabs and
spaces have been munged in your input file.
Any sequence of whitespace in the pattern line will match any sequence
in the input file.
Normal characters must still match exactly.
Each line of the context must still match a line in the input file.
.TP
.B \-n
forces
.B patch
to interpret the patch file as a normal diff.
.TP
.B \-N
causes
.B patch
to ignore patches that it thinks are reversed or already applied.
See also
.B \-R .
.TP
.BI \-o " outfile
causes the next argument to be interpreted as the output file name.
.TP
.BI \-p number
sets the pathname strip count,
which controls how pathnames found in the patch file are treated, in case
the you keep your files in a different directory than the person who sent
out the patch.
The strip count specifies how many slashes are to be stripped from
the front of the pathname.
(Any intervening directory names also go away.)
For example, supposing the filename in the patch file was
.sp
	/u/howard/src/blurfl/blurfl.c
.sp
setting
.B \-p0
gives the entire pathname unmodified,
.B \-p1
gives
.sp
	u/howard/src/blurfl/blurfl.c
.sp
without the leading slash,
.B \-p4
gives
.sp
	blurfl/blurfl.c
.sp
and not specifying
.B \-p
at all just gives you "blurfl.c".
Whatever you end up with is looked for either in the current directory,
or the directory specified by the
.B \-d
switch.
.sp
When in POSIX mode,
.B \-p
always must have an argument, in non-POSIX mode
.B \-p
may be used as an alias for
.BR \-p0 .
.TP
.BI \-r " rejectfile
causes the next argument to be interpreted as the reject file name.
In the default case, the reject file has the same name as the
output file, with the suffix
.B .rej
appended to it.
.TP
.B \-R
tells
.B patch
that this patch was created with the old and new files swapped.
(Yes, I'm afraid that does happen occasionally, human nature being what it
is.)
.B Patch
will attempt to swap each hunk around before applying it.
Rejects will come out in the swapped format.
The
.B \-R
switch will not work with ed diff scripts because there is too little
information to reconstruct the reverse operation.
.Sp
If the first hunk of a patch fails,
.B patch
will reverse the hunk to see if it can be applied that way.
If it can, you will be asked if you want to have the
.B \-R
switch set.
If it can't, the patch will continue to be applied normally.
(Note: this method cannot detect a reversed patch if it is a normal diff
and if the first command is an append (i.e. it should have been a delete)
since appends always succeed, due to the fact that a null context will match
anywhere.
Luckily, most patches add or change lines rather than delete them, so most
reversed normal diffs will begin with a delete, which will fail, triggering
the heuristic.)
.TP
.B \-s
makes
.B patch
do its work silently, unless an error occurs.
.sp
This option is not available in strict POSIX mode.
.TP
.B \-S
causes
.B patch
to ignore this patch from the patch file, but continue on looking
for the next patch in the file.
Thus
.sp
	patch \-S + \-S + <patchfile
.sp
will ignore the first and second of three patches.
.sp
This option is not available in strict POSIX mode.
.TP
.B \-T
Set the modification and access times of patched files
from the time stamps read from the context diff headers.
.sp
If these timestamps do not include a timezone, the time
is assumed to be in local time format.
Since this assumption may be wrong, it is recommended
to create patches with
.B diff \-u
in order to enforce a timezone in the header.
.sp
If there is a content mismatch or a mismatch with the old time stamp,
the new time stamp is not set. Use 
.B \-f
to enforce to set the time stamp in such a case.
.sp
This option is not available in strict POSIX mode.
.TP
.B \-u
forces
.B patch
to interpret the patch file as a unified context diff (a unidiff).
.TP
.B \-v
causes
.B patch
to print out it's revision header and compatiblity status.
.sp
This option is not available in strict POSIX mode.
.TP
.B \-vv
causes
.B patch
to be more verbose.
.TP
.B \-Wv
.PD 0
.TP
.B \-Wversion
.PD
causes
.B patch
to print out it's revision header and compatiblity status.

.TP
.B \-W+
Causes
.B patch
to permit enhancements from historic and recent versions in POSIX mode.
.TP
.B \-Wall
Causes
.B patch
to implement compatibility for Larry Wall's
.BR patch-2.0 .
.sp
This currently only applies to the way
.B patch
selects the filename from the patchfile.
By default,
.B patch
uses the
.B filename determination
algorithm from POSIX that defaults to the
.I original
filename from the diff header.
The algorithm from
.B patch-2.0
defaults to the shorter name, assuming that
.IB filename .orig
is used as
.B original
filename and
.I filename
is used as
.B new
filename.
.TP
.B \-Wposix
Causes
.B patch
to go into strict POSIX mode.
This disables the effect of a previous
.B \-W+
and
.B \-Wall
option.
.TP
.B \-W\-posix
Causes
.B patch
to revert the effect of a previous
.B \-W+
and
.B \-Wposix
option.
.TP
.BI \-x number
sets internal debugging flags, and is of interest only to
.B patch
patchers.
.ne 10
.sp
This option is not available in strict POSIX mode.
.TP
.B \-z
causes the next argument to be interpreted as the backup extension, to be
used in place of \*(L".orig\*(R" or \*(L"~\*(R".
.sp
This option is not available in strict POSIX mode.
.TP
.B \-Z
Set the modification and access times of patched files
from the time stamps read from the context diff headers.
.sp
If these timestamps do not include a timezone, the time
is assumed to be in UTC format.
Since this assumption may be wrong, it is recommended
to create patches with
.B diff \-u
in order to enforce a timezone in the header.
.sp
If there is a content mismatch or a mismatch with the old time stamp,
the new time stamp is not set. Use 
.B \-f
to enforce to set the time stamp in such a case.
.sp
This option is not available in strict POSIX mode.

.SH "EXTENDED DESCRIPTION
.PP
Upon startup, patch will attempt to determine the type of the diff listing,
unless over-ruled by a
.BR \-c ,
.BR \-e ,
.BR \-n ,
or
.B \-u
switch.
Context diffs (old-style, new-style, and unified) and
normal diffs are applied by the
.B patch
program itself, while ed diffs are simply fed to the
.B ed
editor via a pipe.
.PP
.B Patch
will try to skip any leading garbage, apply the diff,
and then skip any trailing garbage.
Thus you could feed an article or message containing a
diff listing to
.BR patch ,
and it should work.
If the entire diff is indented by a consistent amount,
this will be taken into account.
.PP
With context diffs, and to a lesser extent with normal diffs,
.B patch
can detect when the line numbers mentioned in the patch are incorrect,
and will attempt to find the correct place to apply each hunk of the patch.
As a first guess, it takes the line number mentioned for the hunk, plus or
minus any offset used in applying the previous hunk.
If that is not the correct place,
.B patch
will scan both forwards and backwards for a set of lines matching the context
given in the hunk.
First
.B patch
looks for a place where all lines of the context match.
If no such place is found, and it's a context diff, and the maximum fuzz factor
is set to 1 or more, then another scan takes place ignoring the first and last
line of context.
If that fails, and the maximum fuzz factor is set to 2 or more,
the first two and last two lines of context are ignored,
and another scan is made.
(The default maximum fuzz factor is 2.)
If
.B patch
cannot find a place to install that hunk of the patch, it will put the
hunk out to a reject file, which normally is the name of the output file
plus \*(L".rej\*(R" or \*(L"#\*(R" .
(Note that the rejected hunk will come out in context diff form whether the
input patch was a context diff or a normal diff.
If the input was a normal diff, many of the contexts will simply be null.)
The line numbers on the hunks in the reject file may be different than
in the patch file: they reflect the approximate location patch thinks the
failed hunks belong in the new file rather than the old one.
.PP
As each hunk is completed, you will be told whether the hunk succeeded or
failed, and which line (in the new file)
.B patch
thought the hunk should go on.
If this is different from the line number specified in the diff you will
be told the offset.
A single large offset MAY be an indication that a hunk was installed in the
wrong place.
You will also be told if a fuzz factor was used to make the match, in which
case you should also be slightly suspicious.

.SS Patch File Format
.PP
If no original file is specified on the command line,
.B patch
will try to figure out from the leading garbage what the name of the file
to edit is.
The following formats are recognized.
.PP
.ne 5
A context diff includes the following headers:
.PP
    \*(L"\fB***\fP \fIfilename timestamp\fP\*(R"
.br
    \*(L"\fB\-\-\-\fP \fIfilename timestamp\fP\*(R"
.sp
The first line refers to the
.I filename
and
.I timestamp
of the original file and the second line refers to the changed file.

.PP
.ne 5
A unified context diff includes the following headers:
.PP
    \*(L"\fB\-\-\-\fP \fIfilename timestamp\fP\*(R"
.br
    \*(L"\fB+++\fP \fIfilename timestamp\fP\*(R"
.sp
The first line refers to the
.I filename
and
.I timestamp
of the original file and the second line refers to the changed file.

.PP
    \*(L"\fBIndex:\fP\fIfilename\fP\*(R"
.sp
May be added in order to give the filename in case if a normal diff
or an ed script.

If not in strict POSIX mode, 
.PP
    \*(L"\fBPrereq:\fP \fIversion-id\fP\*(R"
.sp
is recognized and used to match against a version specific string in
the file to patch.

.SS Filename Determination
.PP
If no original file is specified on the command line,
.B patch
will use the following search preference:
.TP
.B 1.
In the header of a context diff, the filename is found from lines beginning
with \*(L"\fB***\fP\*(R" or \*(L"\fB\-\-\-\fP\*(R" (if the patch is a unified context diff).
.TP
.B 2.
In the header of a context diff, the filename is found from lines beginning
with \*(L"\fB\-\-\-\fP\*(R" or \*(L"\fB+++\fP\*(R" (if the patch is a unified context diff).
.sp
If the option
.B \-Wall
was specified, the shortest name of an existing file from the two above wins.
.TP
.B 3.
If the diff type is not context and
there is an \*(L"\fBIndex:\fP\*(R"
line in the leading garbage,
.B patch
will try to use the filename from that line.
The context diff header takes precedence over an Index line.
.TP
.B 4.
If the original file cannot be found, but a suitable SCCS or RCS file is
handy,
.B patch
will attempt to get or check out the file.
.TP
.B 5.
If no filename can be intuited from the leading garbage, you will be asked
for the name of the file to patch via the controlling terminal (e.g. via
.B stderr
or
.BR /dev/tty ).
.PP
Additionally, if not in strict POSIX mode and
if the leading garbage contains a \*(L"\fBPrereq:\fP \*(R" line,
.B patch
will take the first word from the prerequisites line (normally a version
number) and check the input file to see if that word can be found.
If not,
.B patch
will ask for confirmation before proceeding.
.PP
The upshot of all this is that you should be able to say, while in a news
interface, the following:
.Sp
	| patch \-d /usr/src/local/blurfl
.Sp
and patch a file in the blurfl directory directly from the article containing
the patch.

.SS Patch Application
.PP
If the patch file contains more than one patch,
.B patch
will try to apply each of them as if they came from separate patch files.
This means, among other things, that it is assumed that the name of the file
to patch must be determined for each diff listing,
and that the garbage before each diff listing will
be examined for interesting things such as filenames and revision level, as
mentioned previously.
If
.B patch
is not in POSIX mode,
you can give switches (and another original file name) for the second and
subsequent patches by separating the corresponding argument lists
by a \*(L'+\*(R'.
(The argument list for a second or subsequent patch may not specify a new
patch file, however.)
.SH ENVIRONMENT
.TP
.B POSIXLY_CORRECT
If present,
.B patch
operates in POSIX mode but also recognizes the additional non-POSIX options
and permits non-POSIX behavior like removing files that have been marked
removed in the 
.B diff \-Nur
output. See
.B \-E
option for more information.
This behavior is implemented to make
.B patch
more compatible to the
.B gpatch
program.
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR patch :
.BR LANG ,
.BR LC_ALL ,
.BR LC_COLLATE ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
.BR LC_TIME ,
and
.BR NLSPATH .
.de ..
.sp
.LP
Affirmative responses are processed using the extended regular expression
defined for the
.B yesexpr
keyword in the
.B LC_MESSAGES
category of
the user's locale. The locale specified in the
.B LC_COLLATE
category
defines the behavior of ranges, equivalence classes, and multi-character
collating elements used in the expression defined for
.BR yesexpr .
The
locale specified in
.B LC_CTYPE
determines the locale for interpretation
of sequences of bytes of text data a characters, the behavior of character
classes used in the expression defined for the
.BR yesexpr .
See
.BR locale (5).
..
.SH FILES
/tmp/patch*
.SH EXIT STATUS
.PP
The following exit values are returned:
.sp
.ne 2
.TP 6n
.B 0
Successful completion.

.sp
.ne 2
.TP
.B 1
One or more lines were written to a reject file.

.sp
.ne 2
.TP
.B >1
An error occurred.

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.BR diff (1),
.BR ed (1)
.BR attributes (5),
.BR environ (5),
.BR standards (5)
.br
.ne 5
.SH NOTES FOR PATCH SENDERS
There are several things you should bear in mind if you are going to
be sending out patches.
.LP
First, you can save people a lot of grief by keeping a patchlevel.h file
which is patched to increment the patch level as the first diff in the
patch file you send out.
.LP
If you put a Prereq: line in with the patch, it won't let them apply
patches out of order without some warning.
.LP
Second, make sure you've specified the filenames right, either in a
context diff header, or with an Index: line.
If you are patching something in a subdirectory, be sure to tell the patch
user to specify a 
.B \-p
switch as needed.
.LP
Third, you can create a file by sending out a diff that compares a
null file to the file you want to create.
This will only work if the file you want to create doesn't exist already in
the target directory.
.LP
Fourth, take care not to send out reversed patches, since it makes people wonder
whether they already applied the patch.
.LP
Fifth, while you may be able to get away with putting 582 diff listings into
one file, it is probably wiser to group related patches into separate files in
case something goes haywire.
.SH DIAGNOSTICS
Too many to list here, but generally indicative that
.B patch
couldn't parse your patch file.
.PP
The message \*(L"Hmm...\*(R" indicates that there is unprocessed text in
the patch file and that
.B patch
is attempting to intuit whether there is a patch in that text and, if so,
what kind of patch it is.
.PP
When applying a set of patches in a loop it behooves you to check the
exit status so you don't apply a later patch to a partially patched file.
.SH CAVEATS
.B Patch
cannot tell if the line numbers are off in an ed script, and can only detect
bad line numbers in a normal diff when it finds a \*(L"change\*(R" or
a \*(L"delete\*(R" command.
A context diff using fuzz factor 3 may have the same problem.
Until a suitable interactive interface is added, you should probably do
a context diff in these cases to see if the changes made sense.
Of course, compiling without errors is a pretty good indication that the patch
worked, but not always.
.PP
.B Patch
usually produces the correct results, even when it has to do a lot of
guessing.
However, the results are guaranteed to be correct only when the patch is
applied to exactly the same version of the file that the patch was
generated from.

.SH COMPATIBILITY ISSUES
.PP
The POSIX standard introduced some small differences to the traditional
behavior of
.BR patch .
The behavior of
.B gpatch
.RB ( "GNU patch" )
differs from both, the traditional
.B patch
and 
.BR "POSIX patch" .
.PP
If you like to write portable patch scripts, you should be aware of the
differences:
.TP
.B \(bu
Traditional patch by default created backups with the
.B .orig
suffix and the
.B \-b
option allowed to define a different suffix.
Modern
.B patch
implementations by default do not create backup files and allow to
enable backups with the
.B \-b
option that does not permit a parameter with POSIX.
.sp
The
.BI \-b " suffix"
behavior of the traditional
.B patch
is equivalent to
.B \-b \-z
.I suffix
with modern
.B patch
implementations in case that enhancements over POSIX are permitted. 
.TP
.B \(bu
.B Patch
writes informational messages to
.B stderr
and does not use
.BR stdout ,
while
.B gpatch
uses
.B stdout
for informational messages.
.TP
.B \(bu
.B Gpatch
changed some of the informational messages;
you cannot expect to get the same messages as with
.BR patch .
.sp
For portable scripts, do not rely on informational messages.
.TP
.B \(bu
In traditional
.BR patch ,
the
.B \-p
option did not need to have an operand. With
.BR "POSIX patch" ,
.B \-p
always must have an operand. The option
.B \-p
without argument in traditional
.B patch
is equivalent to
.BR \-p " 0"
in
.BR "POSIX patch" .
.sp
For portability, use the
.B \-p
option with no space to the following argument, e.g.
.BR \-p 1.
.TP
.B \(bu
The option
.BI \-i " patchfile
is only supported by 
.BR "POSIX patch" ,
but not by traditional
.B patch
or
.BR gpatch .

.TP
.B \(bu
Traditional
.B patch
used several different and partly undocumented methods to determine
the name of the file to be patched from the patchfile that could e.g.
result to create an incorrect new file with new filename if a line
was inserted at the beginning of an existing file.
This
.B patch
and
.B POSIX patch
use the POSIX method for
.B Filename Determination
and only permit to use the the special
.B Index:
line.
.sp
Since
.B gpatch
by default ignores the
.B POSIX Filename Determination
rules,
.B gpatch
by default will use wrong filenames from patches that have been
created with POSIX rules.
.sp
The only way to make sure that a patch file is interpreted correctly by all
.B patch
implementations is to use the original filename for the first
.B diff
argument and to make the first
.B diff
argument shorter than the second argument.
Alternatively use the same filenames for both arguments but have a 
different directory prefix that is stripped off by the
.B \-p
option.
.TP
.B \(bu
.B Gpatch
uses a different method to read replies to questions to the user than
.B patch
does.
Do not rely on
.B patch
to read from
.BR stderr .
.TP
.B \(bu
Traditional
.B patch
used an exit code value that reflected the number of failed hunks and
an exit code
.B 1
if there was one failed hunk or any other problem.
.B POSIX patch
uses exit code
.B 1
if there was any failed hunk and an exit code
.B > 1
if other problems occurred.
.TP
.B \(bu
.B Patch
does not implement support for long options, while
.B gpatch
documents and implements various long options.
.PP
For maximum portability, limit yourself to the following options:
.RS 4
.PD 0
.TP
.B \-c
.TP
.BI \-d " dir
.TP
.BI \-D " define
.TP
.B \-e
.TP
.B \-l
.TP
.B \-n
.TP
.B \-N
.TP
.BI \-o " outfile
.TP
.BI \-p num
.TP
.B \-R
.TP
.BI \-r " rejectfile
.TP
.B \-u
.PD
.RE
.PP
Never use long options.
.B
Use a shorter name for the original filename in the diff header
.B
of the patchfile.

.SH BUGS
Could be smarter about partial matches, excessively \&deviant offsets and
swapped code, but that would take an extra pass.
.PP
If code has been duplicated (for instance with
.BR "#ifdef OLDCODE" " ... " #else " ... "
.BR #endif ),
.B patch
is incapable of patching both versions, and, if it works at all, will likely
patch the wrong one, and tell you that it succeeded to boot.
.PP
If you apply a patch you've already applied,
.B patch
will think it is a reversed patch, and offer to un-apply the patch.
This could be construed as a feature.
.rn }` ''
.SH AUTHORS
Larry Wall <larry@wall.org>
wrote the original version of
.BR patch .
.sp
Wayne Davison added unidiff support.
.sp
J\*org Schilling added modern portability code, 
code to support arbitrarily long lines,
large file support and
code to support POSIX compliance.
.br
.ne 8
.SH "SOURCE DOWNLOAD"
The source code for
.B Schily patch
is included in the
.B schilytools
project and may be retrieved from the
.B schilytools
project at Sourceforge at:
.LP
.B
    http://sourceforge.net/projects/schilytools/
.LP
The download directory is:
.LP
.B
    http://sourceforge.net/projects/schilytools/files/
.LP
Check for the
.B schily\-*.tar.bz2
archives.
.LP
Separate project informations for the Schily Bourne Shell project may be retrieved from:
.LP
.B
    http://schilytools.sourceforge.net/patch.html
