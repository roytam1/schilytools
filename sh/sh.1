'\" te
.\" @(#)sh.1	1.46 15/04/12 Copyright 2012-2015 J. Schilling
.\" Copyright 1989 AT&T
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Portions Copyright (c) 1992, X/Open Company Limited All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sh 1 "2015/04/12" "Schily Bourne Shell" "User Commands"
.SH NAME
sh, jsh \- standard and job control shell and command interpreter
.SH SYNOPSIS
.LP
.nf
.B /usr/bin/sh\c
.RB "   [" \(miacefhikmnprstuvxP "] ["\c
.IR argument ]...
.fi

.LP
.nf
.B /usr/bin/jsh\c
.RB "  [" \(miacefhikmnprstuvxP "] ["\c
.IR argument ]...
.fi

.SH DESCRIPTION
.sp
.LP
The
.B /usr/bin/sh
utility is a command programming language that
executes commands read from a terminal or a file.
.sp
.LP
The
.B jsh
utility is an interface to the shell that provides all of the
functionality of
.B sh
and enables job control (see
.B Job Control
section below).
.sp
.LP
Arguments to the shell are listed in the
.B Invocation
section below.
.SS "Definitions"
.sp
.LP
A
.I blank
is a tab or a space. A
.I name
is a sequence of
.B ASCII
letters, digits, or underscores, beginning with a letter or an
underscore. A
.I parameter
is a name, a digit, or any of the characters
.BR * ,
.BR @ ,
.BR # ,
.BR ? ,
.BR \(mi ,
.BR $ ,
and
.BR ! .

.SS "Invocation"
.sp
.LP
If the shell is invoked through
.BR exec (2)
and the first character of
argument zero is
.BR \(mi ,
commands are initially read from
.B /etc/profile and from
.BR $HOME/.profile,
if such files exist.
Next, for interactive shells, commands are read from
.B /etc/sh.shrc
and from the file with a name that results from doing
.B Parameter Substitution
on the environment variable
.B ENV
if the file exists.
Thereafter, commands are read as described below, which is also the case
when the shell is invoked as
.BR /usr/bin/sh .

.SH OPTIONS
The options below are
interpreted by the shell on invocation only.
.B Note:
Unless the
.B \-c
or
.B \-s
option is specified, the first argument is assumed to be the name
of a file containing commands, and the remaining arguments are passed as
positional parameters to that command file:
.br
.ne 3
.TP 12
.BI \-c " string"
If the
.B \-c
option is present commands are read from
.IR string .
The remaining arguments become positional parameters starting at
.BR $0 .
.br
.ne 5
.TP
.B \-i
If the
.B \-i
option is present or if the shell input and output are
attached to a terminal, this shell is
.BR interactive .
In this case,
TERMINATE is ignored (so that
.B kill 0
does not kill an interactive
shell) and INTERRUPT is caught and ignored (so that
.B wait
is interruptible). In all cases, QUIT is ignored by the shell.
.br
.ne 3
.TP
.B \-p
If the
.B \-p
option is present, the shell does not set the effective user
and group IDs to the real user and group IDs.
.br
.ne 3
.TP
.B \-r
If the
.B \-r
option is present the shell is a restricted shell (see
.BR rsh (1M)).
.br
.ne 3
.TP
.B \-s
If the
.B \-s
option is present or if no arguments remain, commands are
read from the standard input. Any remaining arguments specify the positional
parameters. Shell output (except for
.BR "Special Commands" )
is written to file descriptor 2.
.TP
.B \-version
Print the current
.B Bourne Shell
version and exit.
.LP
Using
.B +
rather than
.B \-
causes the related options to be turned off.
The remaining options and arguments are described under the
.B set
command below.

.SH USAGE
.SS "Commands"
.sp
.LP
A
.I simple-command
is a sequence of non-blank
.IR word s
separated by
.IR blank s.
The first
.I word
specifies the name of the command to be
executed. Except as specified below, the remaining
.IR word s
are passed as
arguments to the invoked command. The command name is passed as argument 0
(see
.BR exec (2)).
The
.I value
of a
.I simple-command
is its exit
status if it terminates normally, or (octal)
.BR 200 +\c
.I status
if it terminates abnormally. See
.BR signal.h (3HEAD)
for a list of status values.
.sp
.LP
A
.I pipeline
is a sequence of one or more
.IR command s
separated by
.BR | .
The standard output of each
.I command
but the last is connected by a
.BR pipe (2)
to the standard input of the next
.IR command .
Each
.I command
is run as a separate process. The shell waits for the last
.I command
to terminate. The exit status of a
.I pipeline
is the exit status of the last command in the
.IR pipeline .
.sp
.LP
A
.I list
is a sequence of one or more
.IR pipeline s
separated by
.BR ; ,
.BR & ,
.BR && ,
or
.BR |\|| ,
and optionally terminated by
.B ;
or
.BR & \&.
Of these four symbols,
.B ;
and
.B &
have equal precedence, which is lower than that of
.B &&
and
.BR |\|| .
The symbols
.B &&
and
.B |\||
also have equal precedence. A semicolon
.RB ( ; )
causes sequential execution of the preceding
.IR pipeline ,
that is, the shell waits for the
.I pipeline
to finish before executing any commands
following the semicolon. An ampersand
.RB  ( & )
causes asynchronous
execution of the preceding pipeline, that is, the shell does
.B not
wait for that pipeline to finish. The symbol
.B &&
.RB ( \||\|| )
causes the
.I list
following it to be executed only if the preceding pipeline
returns a zero (non-zero) exit status. An arbitrary number of newlines can
appear in a
.IR list ,
instead of semicolons, to delimit commands.
.sp
.LP
A
.I command
is either a
.I simple-command
or one of the following.
Unless otherwise stated, the value returned by a command is that of the last
.I simple-command
executed in the command.
.sp
.ne 3
.HP
.B for
.I name
[
.B in
.I word
\&.\|.\|. ]
.B do
.I list
.B done
.br
Each time a
.B for
command is executed,
.I name
is set to the next
.I word
taken from the
.B in
.I word
list. If
.B in
.I word
\&.\|.\|. is omitted, then the
.B for
command executes the
.B do
.I list
once for each positional parameter that is set (see
.B Parameter Substitution
section below). Execution ends when there are no more words
in the list.
.br
.ne 3
.HP
.B case
.I word
.B in
[
.I pattern
[ |
.I pattern
]
.B )
.I list
.B ;\|;
] .\|.\|.
.B esac
.br
A
.B case
command executes the
.I list
associated with the first
.I pattern
that matches
.IR word .
The form of the patterns is the same
as that used for file-name generation (see
.B File Name Generation
section), except that a slash, a leading dot, or a dot immediately following
a slash need not be matched explicitly.
.br
.ne 3
.HP
.B if
.I list
.B then
.I list
[
.B elif
.I list
.B then
.I list
] .\|.\|. [
.B else
.I list
]
.B fi
.br
The
.I list
following
.B if
is executed and, if it returns a zero
exit status, the
.I list
following the first
.B then
is executed.
Otherwise, the
.I list
following
.B elif
is executed and, if its value is zero, the
.I list
following the next
.B then
is executed. Failing that, the
.B else
.I list
is executed. If no
.B else
.I list
or
.B then
.I list
is executed, then the
.B if
command returns a zero exit status.
.br
.ne 3
.HP
.B while
.I list
.B do
.I list
.B done
.PD 0
.HP
.B until
.I list
.B do
.I list
.B done
.br
.PD
A
.B while
command repeatedly executes the
.B while
.I list
and, if the exit status of the last command in the list is zero, executes the
.B do
.IR list ;
otherwise the loop terminates. If no commands in the
.B do
.I list
are executed, then the
.B while
command returns a zero exit status;
.B until
can be used in place of
.B while
to negate the loop termination test.
.br
.ne 3
.HP
.BI ( list )
.br
Execute
.I list
in a sub-shell.
.br
.ne 3
.HP
.BI { " list" ;}
.br
.I list
is executed in the current (that is, parent) shell. The
.B {
must be followed by a space.
.br
.ne 3
.HP
.I name
.B (\|) {
.IB list ;}
.br
Define a function which is referenced by
.IR name .
The body of the function is the
.I list
of commands between
.B {
and
.BR } .
The
.B {
must be followed by a space. Execution of functions is described below (see
.B Execution
section). The
.B {
and
.B }
are unnecessary
if the body of the function is a
.I command
as defined above, under
.BR Commands .
.LP
The following words are only recognized as the first word of a command and
when not quoted:
.sp
.LP
.B "if  then  else  elif  fi  case  esac  for  while  until  do  done  { }
.SS "Comments Lines"
.sp
.LP
A word beginning with
.B #
causes that word and all the following
characters up to a newline to be ignored.
.SS "Alias Substitution"
.LP
After a token has been recognized, but before applying the grammatical rules,
a resulting word that is identified as the command name of a simple command
is examined whether it is an unquoted valid alias name.
A valid alias name is replaced by the value of the alias.
The shell prevents infinite alias loops by not expanding the same alias 
more than once for the same word.
.LP
Alias expansion is performed when the commands are read, not when they
are executed.
.LP
Aliases can be used to redefine
.B built-in
commands but cannot be used to redefine the reserved words listed in the
.B Commands
section. Aliases can be created and listed with the
.B alias
command and removed with the
.B unalias
command.
.LP
.B POSIX
compliant temporary
.B alias
definitions are not inherited by separate invocations of the shell or
when interpreting scripts.
.LP
The Bourne Shell implements enhanced alias features beyond the POSIX
alias definition. Enhanced alias features are disabled by default.
They need to be turned on (see
.B set
command below) to make them operational.
The following additional alias features are available:
.TP
.B persistent aliases
If turned on by
.BR "set \-o globalaliases" ,
persistent global aliases are automatically loaded by all interactive shells.
.TP
.B local aliases
If turned on by
.BR "set \-o localaliases" ,
persistent local aliases are automatically loaded by all interactive shells
as a result of the
.B cd
command.
Local aliases are specific to the current working directory. The local
aliases definitions from the previous working directory are automatically
disabled when the working directory is changed to a different directory.
Local aliases have higher precedence than global aliases.
.SS "Command Substitution"
.sp
.LP
The shell reads commands from the string between two grave accents
.RB ( `` )
and the standard output from these commands can be used as all or
part of a word. Trailing newlines from the standard output are removed.
.sp
.LP
No interpretation is done on the string before the string is read, except
to remove backslashes
.RB ( \e )
used to escape other characters.
Backslashes can be used to escape a grave accent
.RB ( ` )
or another backslash
.RB ( \e )
and are removed before the command string is read.
Escaping grave accents allows nested command substitution. If the command
substitution lies within a pair of double quotes (\c
.B
" .\|.\|.\|` .\|.\|.\|` \&.\|.\|.\| "\c
), a backslash used to escape a double quote (\fB\e"\fR) is
removed. Otherwise, it is left intact.
.sp
.LP
If a backslash is used to escape a newline character
.RB ( \enewline ),
both the backslash and the newline are removed (see the later section on
.BR Quoting ).
In addition, backslashes used to escape dollar signs
.RB ( \e$ )
are removed. Since no parameter substitution is done on the
command string before it is read, inserting a backslash to escape a dollar
sign has no effect. Backslashes that precede characters other than
.BR \e ,
.BR ` ,
\fB"\fR,
.BR newline ,
and
.B $
are left intact when the command string is read.
.SS "Parameter Substitution"
.sp
.LP
The character
.B $
is used to introduce substitutable
.IR parameter s.
There are two types of parameters, positional and keyword. If
.I parameter
is a digit, it is a positional parameter. Positional
parameters can be assigned values by
.BR set .
Keyword parameters (also
known as variables) can be assigned values by writing:
.sp
.LP
.IB name = value
[
.IB name = value
] .\|.\|.
.sp
.LP
The evaluation of the assignments is done from the left to the right
in this shell.
.LP
Pattern-matching is not performed on
.IR value .
There cannot be a function and a variable with the same
.IR name .
.br
.ne 3
.TP 25n
.BI ${ parameter }
The value, if any, of the parameter is substituted. The braces are required
only when
.I parameter
is followed by a letter, digit, or underscore that
is not to be interpreted as part of its name. If
.I parameter
is
.B *
or
.BR @ ,
all the positional parameters, starting with
.BR $1 ,
are substituted (separated by spaces). Parameter
.B $0
is set from argument zero when the shell is invoked.

.br
.ne 3
.TP
.BI ${ parameter :\(mi word  }
Use Default Values. If
.I parameter
is unset or null, the expansion of
.I word
is substituted; otherwise, the value of
.I parameter
is substituted.

.br
.ne 3
.TP
.BI ${ parameter := word }
Assign Default Values. If
.I parameter
is unset or null, the expansion of
.I word
is assigned to
.IR parameter .
In all cases, the final value of
.I parameter
is substituted. Only variables, not positional parameters
or special parameters, can be assigned in this way.

.br
.ne 3
.TP
.BI ${ parameter  :? word }
If
.I parameter
is set and is non-null, substitute its value; otherwise, print
.I word
and exit from the shell. If
.I word
is omitted, the message "parameter null or not set" is printed.

.br
.ne 3
.TP
.BI ${ parameter :+ word }
If
.I parameter
is set and is non-null, substitute
.IR word ;
otherwise substitute nothing.

.sp
.LP
In the above,
.I word
is not evaluated unless it is to be used as the
substituted string, so that, in the following example,
.B pwd
is executed only if
.B d
is not set or is null:
.sp
.in +2
.nf
.B "echo  ${d:\(mi`pwd`}
.fi
.in -2
.sp

.sp
.LP
If the colon
.RB ( : )
is omitted from the above expressions, the shell
only checks whether
.I parameter
is set or not.
.sp
.LP
The following parameters are automatically set by the shell.
.br
.ne 3
.TP 8
.B #
The number of positional parameters in decimal.
.br
.ne 3
.TP
.I n
The
.IR n -th
positional parameter.
The parameter name
.I n
is in the range from 1 to
.BR $# .
.br
.ne 4
.TP
.B 0
Parameter
.B $0
is set from argument zero when the shell is invoked.
If running a script,
.B $0
is the name of the script.
.br
.ne 3
.TP
.B *
All positional parameters starting from
.BR $1 .
\fB"$*"\fR
expands to one argument that contains
all positional parameters separated by spaces.
.br
.ne 3
.TP
.B @
All positional parameters starting from
.BR $1 .
\fB"$@"\fR
expands to
.B $#
arguments.
.br
.ne 3
.TP
.B \(mi
Flags supplied to the shell on invocation or by the
.B set
command.
.br
.ne 3
.TP
.B ?
The decimal value returned by the last synchronously executed command.
.br
.ne 3
.TP
.B $
The process number of this shell.
.br
.ne 3
.TP
.B !
The process number of the last background command invoked.
.LP
The following parameters are used by the shell. The parameters in this
section are also referred to as environment variables.
.br
.ne 3
.TP 13n
.B HOME
The default argument (home directory) for the
.B cd
command, set to the user's login directory by
.BR login (1)
from the password file (see
.BR passwd (4)).

.br
.ne 3
.TP
.B PATH
The search path for commands (see
.B Execution
section below).
If
.B PATH
is not set, it defaults to
.BR /usr/bin: .

.br
.ne 3
.TP
.B CDPATH
The search path for the
.B cd
command.

.br
.ne 3
.TP
.B ENV
This variable is used when and only when an interactive shell is invoked.
It is subject to
.B Parameter Substitution
by the shell, and the resulting value is used as the pathname of a script
that is executed when the shell is invoked.
This file is typically used to define function definitions and
transient alias definitions or to turn on persistent alias features
or jobcontrol.
The default value is
.BR $HOME/.shrc .
If the result of the
.B Parameter Substitution
starts with
.B /./
or
.B ./
the file
.B /etc/sh.shrc
is not executed.

.br
.ne 3
.TP
.B IGNOREEOF
If set to
.BR on ,
the shell will not exit if a
.B ^D
is typed and the cursor is on an empty command line.
The default is not to ignore EOF.
.B IGNOREEOF
is only supported if
.B sh
was compiled with support for history editing.

.br
.ne 3
.TP
.B HISTORY
The maximum number of lines to keep in the command history editor.
The default is to keep 100 lines of command history.
.B HISTORY
is only supported if
.B sh
was compiled with support for history editing.

.br
.ne 3
.TP
.B MAIL
If this parameter is set to the name of a mail file
.I and
the
.B MAILPATH
parameter is not set, the shell informs the user of the
arrival of mail in the specified file.

.br
.ne 3
.TP
.B MAILCHECK
This parameter specifies how often (in seconds) the shell checks for the
arrival of mail in the files specified by the
.B MAILPATH
or
.B MAIL
parameters. The default value is
.B 600
seconds (10 minutes). If set to
0, the shell checks before each prompt.

.br
.ne 3
.TP
.B MAILPATH
A colon-separated list of file names. If this parameter is set, the shell
informs the user of the arrival of mail in any of the specified files. Each
file name can be followed by % and a message that is e printed when the
modification time changes. The default message is,
.BR "you have mail" .

.br
.ne 3
.TP
.B OLDPWD
The previous working directory, set by the
.BR cd ,
the
.B pushd
and the
.B popd
command.
.B OLDPWD
is not set before the first
.BR cd ,
.B pushd
or
.B popd
command.

.br
.ne 3
.TP
.B OPTARG
This variable is used by
.B getopts
to store the argument if an option is using arguments.

.br
.ne 3
.TP
.B OPTIND
This variable is used by
.B getopts
as the index of the next argument to be processed.

.br
.ne 3
.TP
.B PS1
Primary prompt string, by default " $ \|".

.br
.ne 3
.TP
.B PS2
Secondary prompt string, by default " > \|".

.br
.ne 3
.TP
.B PWD
The present working directory set by the
.BR cd ,
the
.B pushd
and the
.B popd
command.
For efficiency and to avoid NFS based hangs,
.B PWD
is not set before the first
.BR cd ,
.BR dirs ,
.BR pushd ,
.BR popd ,
or
.B pwd
command.
As it may have been imported with invalid content from the
environment of the calling process, it is recommended to
call
.B pwd
or
.B cd .
before depending on the content of
.BR PWD .

.br
.ne 3
.TP
.B IFS
Internal field separators, normally
.BR space ,
.BR tab ,
and
.B newline
(see
.B Blank Interpretation
section).

.br
.ne 3
.TP
.B SAVEHISTORY
If set to
.BR on ,
the current history is saved in the file
.B $HOME/.history
when this shell exits.
The default is not to save the history.
.B SAVEHISTORY
is only supported if
.B sh
was compiled with support for history editing.

.br
.ne 3
.TP
.B SHACCT
If this parameter is set to the name of a file writable by the user, the
shell writes an accounting record in the file for each shell procedure
executed.

.br
.ne 3
.TP
.B SHELL
When the shell is invoked, it scans the environment (see
.B Environment
section below) for this name.

.br
.ne 3
.TP
.B TERM
Used to determine the name of the terminal type.
If this variable is unset or null, an unspecified default terminal type is used.
.B TERM
is only supported if
.B sh
was compiled with support for history editing.

.br
.ne 3
.TP
.B TERMCAP
This variable holds either a precompiled termcap entry
or the pathname to be used to find a termcap database file.
If it holds a precompiled entry that does not match the
.B TERM
environment, the termcap database is parsed as if the
.B TERMCAP
environment is not set.
.B TERMCAP
is automatically exported after filling it with a precompiled
entry to speed up
.B termcap
based applications.
.B TERMCAP
is only supported if
.B sh
was compiled with support for history editing.

.br
.ne 3
.TP
.B TERMPATH
If
.B TERMCAP
is empty or not set, then the
.B TERMPATH
environment is scanned for pathnames of files that contain a
.B termcap
database.
It holds a list of filenames separated by colons or spaces (i.e.,  ":" or " ").
If the
.B TERMPATH
symbol is not set, the files
.B $HOME/.termcap
and
.B /etc/termcap
are scanned in that order.
If a pathname in
.B TERMPATH
does not start with a slash ("/"), then the
.B HOME
environment is prepended to the name.
.B TERMPATH
is only supported if
.B sh
was compiled with support for history editing.

.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR sh :
.BR LANG ,
.BR LC_ALL ,
.B LC_CTYPE
and
.BR LC_MESSAGES .
.sp
.LP
The shell gives default values to
.BR PATH ,
.BR PS1 ,
.BR PS2 ,
.BR MAILCHECK ,
.BR HISTORY ,
and
.BR IFS .
Default values for
.B HOME
and
.B MAIL
are set by
.BR login (1).
.SS "Blank Interpretation"
.sp
.LP
After parameter and command substitution, the results of substitution are
scanned for internal field separator characters (those found in
.BR IFS )
and split into distinct arguments where such characters are found. Explicit
null arguments
(\fB""\fR or
.BR \&'' )
are retained. Implicit null arguments (those resulting from
.IR parameter s
that have no values) are
removed.
.LP
The
.B IFS
parameter is applied to any unquoted word. Thus.
.RS
.sp
.nf
.B IFS=X
.B echoXfoo
.fi
.sp
.RE
executes the `echo' command with the argument `foo'.

.SS "Input/Output Redirection"
.sp
.LP
A command's input and output can be redirected using a special notation
interpreted by the shell. The following can appear anywhere in a
.I simple-command
or can precede or follow a
.I command
and are
.B not
passed on as arguments to the invoked command.
.B Note:
Parameter and command substitution occurs before
.I word
or
.I digit
is used.
.br
.ne 3
.TP 16n
.BI < word
Use file
.I word
as standard input (file descriptor 0).

.br
.ne 3
.TP
.BI > word
Use file
.I word
as standard output (file descriptor 1). If the file
does not exist, it is created; otherwise, it is truncated to zero length.

.br
.ne 3
.TP
.BI >> word
Use file
.I word
as standard output. If the file exists, output is
appended to it by first seeking to the
.BR EOF .
Otherwise, the file is
created.

.br
.ne 3
.TP
.BI <\|> word
Open file
.I word
for reading and writing as standard input.

.br
.ne 3
.TP
.BI <<\fR[\fB\(mi\fR] word
After parameter and command substitution is done on
.IR word ,
the shell
input is read up to the first line that literally matches the resulting
.IR word ,
or to an
.BR EOF .
If, however, the hyphen
.RB ( \(mi )
is appended to
.BR << :
.RS 16n
.RS +4
.TP
1.
leading tabs are stripped from
.I word
before the shell input is read
(but after parameter and command substitution is done on
.IR word );
.RE
.RS +4
.TP
2.
leading tabs are stripped from the shell input as it is read and before
each line is compared with
.IR word ;
and
.RE
.RS +4
.TP
3.
shell input is read up to the first line that literally matches the
resulting
.IR word ,
or to an
.BR EOF .
.RE
If any character of
.I word
is quoted (see
.B Quoting
section later),
no additional processing is done to the shell input. If no characters of
.I word
are quoted:
.RS +4
.TP
1.
parameter and command substitution occurs;
.RE
.RS +4
.TP
2.
(escaped)
.BR \enewline s
are removed; and
.RE
.RS +4
.TP
3.
.B \e
must be used to quote the characters
.BR \e ,
.BR $ ,
and
.BR ` .
.RE
The resulting document becomes the standard input.
.RE

.br
.ne 3
.TP
.BI <& digit
Use the file associated with file descriptor
.I digit
as standard input.
Similarly for the standard output using
.BI >& digit\fR.

.br
.ne 3
.TP
.B  <&\(mi
The standard input is closed. Similarly for the standard output using
.BR >&\(mi .

.sp
.LP
If any of the above is preceded by a digit, the file descriptor which is
associated with the file is that specified by the digit (instead of the
default
.B 0
or
.BR 1 ).
For example:
.sp
.in +2
.nf
.B \&... 2>&1
.fi
.in -2
.sp

.sp
.LP
associates file descriptor 2 with the file currently associated with file
descriptor 1.
.sp
.LP
The order in which redirections are specified is significant. The shell
evaluates redirections left-to-right. For example:
.sp
.in +2
.nf
.BI "\&... 1>" "xxx\fR 2>&1"
.fi
.in -2
.sp

.sp
.LP
first associates file descriptor 1 with file
.IR xxx .
It associates file
descriptor 2 with the file associated with file descriptor 1 (that is,
.IR xxx ).
If the order of redirections were reversed, file descriptor 2
would be associated with the terminal (assuming file descriptor 1 had been)
and file descriptor 1 would be associated with file
.IR xxx .
.sp
.LP
Using the terminology introduced on the first page, under
.BR Commands ,
if a
.I command
is composed of several
.IR "simple commands" ,
redirection is evaluated for the entire
.I command
before it is evaluated for each
.IR "simple command" .
That is, the shell evaluates redirection for the entire
.IR list ,
then each
.I pipeline
within the
.IR list ,
then each
.I command
within each
.IR pipeline ,
then each
.I list
within each
.IR command .
.sp
.LP
If a command is followed by
.B &
and job control (see
.BR "set \-m" )
is not active, the default standard input for the
command is the empty file,
.BR /dev/null .
Otherwise, the environment for
the execution of a command contains the file descriptors of the invoking
shell as modified by input/output specifications.
.SS "File Name Generation"
.sp
.LP
Before a command is executed, each command
.I word
is scanned for the characters
.BR * ,
.BR ? ,
and
.BR [ .
If one of these characters appears
the word is regarded as a
.IR pattern .
The word is replaced with
alphabetically sorted file names that match the pattern. If no file name is
found that matches the pattern, the word is left unchanged. The character
.B \&.
at the start of a file name or immediately following a
.BR / ,
as well as the character
.B /
itself, must be matched explicitly.
.br
.ne 3
.TP 13n
.B *
Matches any string, including the null string.

.br
.ne 3
.TP
.B ?
Matches any single character.

.br
.ne 3
.TP
.BR [ .\|.\|. ]
Matches any one of the enclosed characters. A pair of characters separated
by
.B \(mi
matches any character lexically between the pair, inclusive.
If the first character following the opening
.B [
is a
.BR ! ,
any character not enclosed is matched.

.sp
.LP
Notice that all quoted characters (see below) must be matched explicitly in
a filename.
.SS "Quoting"
.sp
.LP
The following characters have a special meaning to the shell and cause
termination of a word unless quoted:
.sp
.LP
.B ";  &  (  )  |  ^  <  >  newline  space  tab
.sp
.LP
A character can be
.I quoted
(that is, made to stand for itself) by
preceding it with a backslash
.RB ( \e )
or inserting it between a pair of
quote marks
.RB ( \|'\|'
or \fB""\fR). During processing, the shell can
quote certain characters to prevent them from taking on a special meaning.
Backslashes used to quote a single character are removed from the word
before the command is executed. The pair
.B \enewline
is removed from a word before command and parameter substitution.
.sp
.LP
All characters enclosed between a pair of single quote marks
.RB ( \|'\|' ),
except a single quote, are quoted by the shell. Backslash
has no special meaning inside a pair of single quotes. A single quote can be
quoted inside a pair of double quote marks (for example, \fB"\|'"\fR), but a
single quote can not be quoted inside a pair of single quotes.
.sp
.LP
Inside a pair of double quote marks (\fB""\fR), parameter and command
substitution occurs and the shell quotes the results to avoid blank
interpretation and file name generation. If
.B $*
is within a pair of
double quotes, the positional parameters are substituted and quoted,
separated by quoted spaces (\fB"$1 \|$2\fR \|.\|.\|.\fB"\fR). However, if
.B $@
is within a pair of double quotes, the positional parameters are
substituted and quoted, separated by unquoted spaces (\fB"$1"\|"$2"\fR \|
\&.\|.\|. ).
.B \e
quotes the characters
.BR \e ,
.BR ` ,
.B ,
(comma), and
.BR $ .
The pair
.B \enewline
is removed before parameter
and command substitution. If a backslash precedes characters other than
.BR \e ,
.BR ` ,
.B ,
(comma),
.BR $ ,
and newline, then the backslash
itself is quoted by the shell.
.SS "Prompting"
.sp
.LP
When used interactively, the shell prompts with the value of
.B PS1
before reading a command. If at any time a newline is typed and further
input is needed to complete a command, the secondary prompt (that is, the
value of
.BR PS2 )
is issued.
.SS "Environment"
.sp
.LP
The
.I environment
(see
.BR environ (5))
is a list of name-value pairs
that is passed to an executed program in the same way as a normal argument
list. The shell interacts with the environment in several ways. On
invocation, the shell scans the environment and creates a parameter for each
name found, giving it the corresponding value. If the user modifies the
value of any of these parameters or creates new parameters, none of these
affects the environment unless the
.B export
command is used to bind the
shell's parameter to the environment (see also
.BR "set \-a" ).
A parameter can be removed from the environment with the
.B unset
command.
The environment seen by any executed command is thus composed of any
unmodified name-value pairs originally inherited by the shell, minus any
pairs removed by
.BR unset ,
plus any modifications or additions, all of
which must be noted in
.B export
commands.
.sp
.LP
The environment for any
.I simple-command
can be augmented by prefixing
it with one or more assignments to parameters. Thus:
.sp
.in +2
.nf
.BI TERM=450 " command
.fi
.in -2
.sp

.sp
.LP
and
.sp
.in +2
.nf
.BI "(export TERM; TERM=450;"  " command" )
.fi
.in -2
.sp

.sp
.LP
are equivalent as far as the execution of
.I command
is concerned if
.I command
is not a Special Command. If
.I command
is a Special Command, then
.sp
.in +2
.nf
.BI TERM=450  " command
.fi
.in -2
.sp

.sp
.LP
modifies the
.B TERM
variable in the current shell.
.sp
.LP
If the
.B \-k
flag is set,
.I all
keyword arguments are placed in the
environment, even if they occur after the command name. The following
example first prints
.B "a=b c
and
.BR c :
.sp
.in +2
.nf
\fBecho a=b  c

a=b  c

set  \(mik

echo a=b  c

c\fR
.fi
.in -2
.sp

.SS "Signals"
.sp
.LP
The
.B INTERRUPT
and
.B QUIT
signals for an invoked command are
ignored if the command is followed by
.BR & \&.
Otherwise, signals have the
values inherited by the shell from its parent, with the exception of signal
11 (but see also the
.B trap
command below).
.SS "Execution"
.sp
.LP
Each time a command is executed, the command substitution, parameter
substitution, blank interpretation, input/output redirection, and filename
generation listed above are carried out. If the command name matches the
name of a defined function, the function is executed in the shell process
(note how this differs from the execution of shell script files, which
require a sub-shell for invocation). If the command name does not match the
name of a defined function, but matches one of the
.B Special Commands
listed below, it is executed in the shell process.
.sp
.LP
The positional parameters
.BR $1 ,
.BR $2 ,
\&.\|.\|. are set to the
arguments of the function. If the command name matches neither a
.B Special Command
nor the name of a defined function, a new process is created and
an attempt is made to execute the command via
.BR exec (2).
.sp
.LP
The shell parameter
.B PATH
defines the search path for the directory
containing the command. Alternative directory names are separated by a colon
.RB ( : ).
The default path is
.BR /usr/bin: .
The current directory is
specified by a null path name, which can appear immediately after the equal
sign, between two colon delimiters anywhere in the path list, or at the end
of the path list. If the command name contains a
.B /
the search path is
not used. Otherwise, each directory in the path is searched for an
executable file. If the file has execute permission but is not an
.B a.out
file, it is assumed to be a file containing shell commands. A
sub-shell is spawned to read it. A parenthesized command is also executed in
a sub-shell.
.sp
.LP
The location in the search path where a command was found is remembered by
the shell (to help avoid unnecessary
.IR exec s
later). If the command was
found in a relative directory, its location must be re-determined whenever
the current directory changes. The shell forgets all remembered locations
whenever the
.B PATH
variable is changed or the
.B hash \-r
command is executed (see below).
.SS "Special Commands"
.sp
.LP
Input/output redirection is now permitted for these commands. File
descriptor 1 is the default output location. When Job Control is enabled,
additional
.B Special Commands
are added to the shell's environment (see
.B Job Control
section below).
.br
.ne 3
.TP 4n
.B :
.sp .6
No effect; the command does nothing. A zero exit code is returned.

.br
.ne 3
.TP
.BI \&. " filename
.sp
Read and execute commands from
.I filename
and return. The search path
specified by
.B PATH
is used to find the directory containing
.IR filename .

.br
.ne 3
.HP
.B [
.RI [ expr "] ]
.sp .6
See
.B test
builtin below.

.br
.ne 3
.TP
.B "alias \fR[\fI options \fR] [\fIalias-name\fR[=\fIvalue\fR]...]
.sp .6
The
.B alias
command creates, redefines or lists existing alias definitions.
An alias definition provides a string value that replaces a command name
when it is encountered on the command line.
.sp
The
.B alias
command in the Bourne Shell supports temporary aliases (POSIX aliases)
that affect only the current execution environment as well as
persistent aliases that affect all interactive shells that are called after a
persistent alias definition was entered or modified.
.sp
An argument in the form
.I alias-name
causes
.B alias
to list the related alias on stdout.
An argument in the form
.IR alias-name = value
causes
.B alias
to define or redefine an alias or to push an alias definition on top of
an old one.
If no argument was given,
.B alias
lists all current alias definitions.
.sp
Alias definitions must be written with appropriate quoting.
.sp
When operating on temporary aliases (i.e. when neither
.B \-g
nor
.B \-l
have been specified), the
.B alias
command always pushes new definitions on top of older ones.
This makes such alias definitions temporary in the
global aliases name space by default, as required by the POSIX standard.
The following options may be used to modify operation:
.RS
.TP
.B \-a
Define an alias definition that is expanded on all arguments of a
command line and not only for command names. Use with care.
.TP
.B \-e
List the everlasting version of the persistent alias definitions instead of
listing the currently active definitions that may have been pushed on top
of the persistent definitions.
.TP
.B \-g
Define or list persistent global aliases that are stored in the file
.B $HOME/.globals
and read by interactive shells.
When defining an alias with
.B \-g
in effect,
.B alias
by default modifies the current top level definition for global aliases.
If there was no push operation before on the related alias,
the current definition is made persistent by writing the definitions to
.BR $HOME/.globals .
The option
.B \-g
is not permitted if persistent global aliases are disabled (see
.B set
command below).
.TP
.B \-l
Define or list persistent directory local aliases that are stored in the file
.B .locals
in the current directory and read by interactive shells.
When defining an alias with
.B \-l
in effect,
.B alias
by default modifies the current top level definition for local aliases.
If there was no push operation before on the related alias,
the current definition is made persistent by writing the definitions to
.B .locals
in the current directory.
The option
.B \-l
is not permitted if persistent local aliases are disabled (see
.B set
command below).
.TP
.B \-p
When defining or redefining aliases,
enforce a push operation even if the option
.B \-g
or
.B \-l
has been specified.
In push mode, the new alias definition is pushed temporarily on
top of existing definitions instead of modifying the current
definition.
.sp
When listing aliases, this option implements compatibility to bash/ksh93
and outputs aliases in a form that can be used as input to the shell
to recreate the current aliases.
With
.B \-p
in effect in list mode, the persistent definition and all pushed definitions
are listed; otherwise only the current active definitions are listed.
.TP
.B \-r
Reload persistent aliases after removing all current aliases.
If persistent aliases are disabled, the effect is the same as with
calling
.BR "unalias \-a" .
No arguments are allowed with this option.
.TP
.B \-\-raw
Output the listing in the raw format that is used in the persistent
definition files
.B $HOME/.globals
and
.BR .locals .
This increases readability as the quoting needed for defining an alias
with the
.B alias
command is omitted.
.LP
Aliases are often used together with the
.B dosh
builtin in order to run small parameterized shell scripts.
.RE

.br
.ne 3
.TP
.B alloc
.sp .6
In case
.B sh
has been compiled with storage debugging support, the
.B alloc
command prints information about the curren state of the storage
subsystem; otherwise
.B alloc
is a dummy command.
The
.B alloc
command was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
\fBbg\fR [\fB%\fIjobid .\|.\|.\fR]
.sp .6
When Job Control is enabled, the
.B bg
command is added to the user's
environment to manipulate jobs. Resumes the execution of a stopped job in
the background. If
.BI % jobid
is omitted the current job is assumed.
(See
.B Job Control
section below for more detail.)

.br
.ne 3
.TP
\fBbreak\fR [ \fIn\fR ]
.sp .6
Exit from the enclosing
.B for
or
.B while
loop, if any. If
.I n
is specified, break
.I n
levels.

.br
.ne 3
.TP
\fBcd\fR [ \fIargument\fR ]
.sp .6
Change the current directory to
.IR argument .
The shell parameter
.B HOME
is the default
.IR argument .
The shell parameter
.B CDPATH
defines the search path for the directory containing
.IR argument .
Alternative directory names are separated by a colon
.RB ( : ).
The default path is
.B <null>
(specifying the current directory).
.B Note:
The current directory is specified by a null path name, which can appear
immediately after the equal sign or between the colon delimiters anywhere
else in the path list. If
.I argument
begins with a
.B /
the search
path is not used. Otherwise, each directory in the path is searched for
.IR argument .
.sp
The previous working directory is kept in the shell parameter
.BR OLDPWD ,
the new working directory is kept in the shell parameter
.BR PWD .
The top of the directory stack is replaced by the new working directory.

.br
.ne 3
.TP
\fBchdir\fR [ \fIdir\fR ]
.sp .6
.B chdir
changes the shell's working directory to directory
.IR dir .
If no argument is given, change to the home directory of the user. If
.I dir
is a relative pathname not found in the current directory, check
for it in those directories listed in the
.B CDPATH
variable. If
.I dir
is the name of a shell variable whose value starts with a
.BR / ,
change to the directory named by that value.

.br
.ne 3
.TP
\fBcontinue\fR [ \fIn\fR ]
.sp .6
Resume the next iteration of the enclosing
.B for
or
.B while
loop. If
.I n
is specified, resume at the
.IR n -th
enclosing loop.

.br
.ne 3
.TP
.B dirs
.sp .6
Print the content of the directory stack.
The top of the stack is the leftmost element which has the logical offset
.BR 0 .
The next element to the right has the logical offset
.BR 1 .
The logical offset of a directory may be used as argument to the
.B pushd
and the
.B popd
command.
If there is no directory stack, the result is the same as with calling
.BR pwd .
The
.B dirs
command was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
.BI dosh " command_string \fR[[\fI command_name \fR] [\fI args \fR]]
.sp .6
The
.B dosh
command executes commands from
.I command_string
with new positional parameters as if the commands in
.I command_string
were read from a shell script.
If the optional parameter
.I command_name
is present, it replaces the positional parameter
.BR $0 .
Additional arguments are set up as positional parameters for the commands in
.IR command_string ,
starting with
.BR $1 .
The
.B dosh
command thus behaves like
.BI "sh \-c" " command_string\fR,
but does not launch a new shell.
Calling
.B return
returns from
.I command_string
as if returning from a function.
Calling
.B exit
does not exit the shell but returns from the
.IR command_string .
The
.B dosh
command is often used together with aliases.
The
.B dosh
command was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
\fBecho\fR [ \fIarguments\fR .\|.\|. ]
.sp .6
The words in
.I arguments
are written to the shell's standard output,
separated by space characters. See
.BR echo (1)
for fuller usage and description.
.sp
.ne 4
If
.B /usr/ucb
appears before any other system directory in
.B PATH
and the first argument is
.BR \-n ,
.B echo
does not print a final
.B new-line
and does not interpret backslashed escape characters.
Otherwise,
.B \-n
is treated as a normal argument.
If the
.B $SYSV3
variable is set in the initial environment passed to the shell, the
.B \-n
argument is also interpreted, but
escape sequences are processed as usual.
.sp
The following character sequences are recognized within any of the arguments:
.RS
.TP
.B \ea
Alert character.
.PD 0
.TP
.B \eb
Backspace.
.TP
.B \ec
Print line without new-line. All characters following the
.B \ec
in the argument are ignored.
.TP
.B \ef
Form-feed.
.TP
.B \en
New-line.
.TP
.B \er
Carriage return.
.TP
.B \et
Tab.
.TP
.B \ev
Vertical tab.
.TP
.B \e\e
Backslash.
.TP
.BI \e0 n
Where
.I n
is the 8-bit character whose
.B ASCII
code is the 1-, 2- or 3-digit octal number representing that character.
.PD
.RE

.br
.ne 3
.TP
\fBeval\fR [ \fIargument\fR .\|.\|. ]
.sp .6
The arguments are read as input to the shell and the resulting command(s)
executed.

.br
.ne 3
.TP
\fBexec\fR [ \fIargument\fR .\|.\|. ]
.sp .6
The command specified by the arguments is executed in place of this shell
without creating a new process. Input/output arguments can appear and, if no
other arguments are given, cause the shell input/output to be modified.

.br
.ne 3
.TP
\fBexit\fR [ \fIn\fR ]
.sp .6
Causes the calling shell or shell script to exit with the exit status
specified by
.IR n .
If
.I n
is omitted the exit status is that of the
last command executed (an
.B EOF
also causes the shell to exit.)

.br
.ne 3
.TP
\fBexport\fR [ \fIname\fR .\|.\|. ]
.sp .6
The given
.IR name s
are marked for automatic export to the
.I environment
of subsequently executed commands. If no arguments are
given, variable names that have been marked for export during the current
shell's execution are listed. (Variable names exported from a parent shell
are listed only if they have been exported again during the current shell's
execution.) Function names are
.B not
exported.

.br
.ne 3
.TP
\fBfalse\fR
.sp .6
The
.B false
builtin
does nothing. A non-zero exit code is returned.

.br
.ne 3
.TP
\fBfg\fR [\fB%\fIjobid .\|.\|.\fR]
.sp .6
When Job Control is enabled, the
.B fg
command is added to the user's
environment to manipulate jobs. This command resumes the execution of a
stopped job in the foreground and also moves an executing background job
into the foreground. If
.BI % jobid
is omitted, the current job is
assumed. (See
.B Job Control
section below for more detail.)

.br
.ne 3
.TP
\fBgetopts \fIoptstring name\fR [\fIarg\fR...]
.sp .6
Use in shell scripts to support command syntax standards (see
.BR Intro (1)).
This command parses positional parameters and checks for
legal options. See
.BR getoptcvt (1)
for usage and description.
.RS
.LP
The
.B getopts
builtin command parses its
.I args
or the global
.I args
of the current shell, using
.I optstring
as option definition.
Each time it is invoked, it places the next option into the variable
.I name
and the index of the next argument to be processed into
.BR OPTIND .
Whenever the shell or a shell script is invoked,
.B OPTIND
is initialized to
.BR 1 .
Calling
.B getopts
repeatedly causes one option to be retrieved per call.
.LP
When an option requires an option-argument,
.I getopts
places it in the shell variable
.BR OPTARG .
.LP
If an illegal option is encountered,
.B ?
is placed in
.IR name .
If
.I optstring
starts with a colon and a required option-argument is missing, a colon
is placed in
.IR name .
.LP
When the end of options is encountered,
.B getopts
exits with a non-zero exit status.
The special arg
.B \-\-
can be used to delimit the end of the options.
.LP
.I optstring
must contain the option letters the command using
.B getopts
recognizes. If a letter is followed by a colon, the option is expected
to have an argument, or group of arguments, which must be separated
from it by white space.
.LP
Unless
.I optstring
starts with a colon,
.B getopts
prints an error message on the standard error when
it encounters an option letter not included in optstring.
.LP
.B getopts
supports one or more long options as an alias to a short option.
You must enclose each long option equivalent in parentheses, as follows:
.LP
  getopts "f:(file)(input-file)o:(output-file)"
.LP
In the above example, both
.B \-\-file
and
.B \-\-input\-file
are the equivalent of
.BR \-f ,
and
.B \-\-output\-file
is the equivalent of
.BR \-o .
.RE

.br
.ne 3
.TP
\fBhash\fR [ \fB\-r\fR ] [ \fIname\fR .\|.\|. ]
.sp .6
For each
.IR name ,
the location in the search path of the command specified by
.I name
is determined and remembered by the shell. The
.B \-r
option causes the shell to forget all remembered locations. If no
arguments are given, information about remembered commands is presented.
.I Hits
is the number of times a command has been invoked by the shell
process.
.I Cost
is a measure of the work required to locate a command in
the search path. If a command is found in a "relative" directory in the
search path, after changing to that directory, the stored location of that
command is recalculated. Commands for which this are done are indicated by
an asterisk
.RB ( * )
adjacent to the
.I hits
information.
.I Cost
is incremented when the recalculation is done.

.br
.ne 4
.TP
.B history
.sp .6
Print the current command history.
The
.B history
command is only supported if
.B sh
was compiled with support for history editing.
The
.B history
command was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
\fBjobs\fR [\fB\-p|\-l\fR] [\fB%\fIjobid ...\fR]
.PD 0
.TP
\fBjobs\fR \fB\-x\fR \fIcommand\fR [\fIarguments\fR]
.PD
.sp .6
Reports all jobs that are stopped or executing in the background. If
.BI % jobid
is omitted, all jobs that are stopped or running in the
background are reported. (See
.B Job Control
section below for more detail.)

.br
.ne 3
.TP
\fBkill\fR [ \fB\-\fIsig\fR ] \fB%\fIjob\fR .\|.\|.
.PD 0
.TP
.B kill \-l
.PD
.sp .6
Sends either the
.B TERM
(terminate) signal or the specified signal to
the specified jobs or processes. Signals are either given by number or by
names (as given in
.BR signal.h (3HEAD)
stripped of the prefix "SIG" with the exception that
.B SIGCHD
is named
.BR CHLD ).
If the signal being sent is
.B TERM
(terminate) or
.B HUP
(hangup), then the job or
process is sent a
.B CONT
(continue) signal if it is stopped. The
argument
.I job
can be the process id of a process that is not a member
of one of the active jobs. See
.B Job Control
section below for a description of the format of
.IR job .
In the second form,
.BR "kill \-l" ,
the signal numbers and names are listed. (See
.BR kill (1)).

.br
.ne 3
.TP
\fBlogin\fR [ \fIargument\fR .\|.\|. ]
.sp .6
Equivalent to `\fBexec login \fIargument\fR.\|.\|.\|.' See
.BR login (1)
for usage and description.

.br
.ne 8
.TP
.B map
.PD 0
.TP
.B map \-r
.TP
\fBmap \fImap_from map_to\fR [ \fIcomment\fR ]
.TP
\fBmap \-u \fImap_from\fR
.PD
.sp .6
Handle history editor input mapping.
Input mapping in the history editor is automatically managed via
.B TERMCAP
for the cursor keys and via manual maps in the file
.BR $HOME/.bshmap .
The
.B map
command is only supported if
.B sh
was compiled with support for history editing.
.RS
.LP
If the
.B map
command is called without arguments, it prints the current input mapping.
.LP
If
.B map
is called with
.BR \-r ,
all current mappings are removed and the default mapping is reloaded from
.B TERMCAP
and
.BR $HOME/.bshmap .
Call
.B map \-r
after changing
.BR TERM ,
.B TERMCAP
or
.B TERMPATH
or when a change was made in the file
.BR $HOME/.bshmap .
.LP
It
.B map
is called with two or three arguments, a new mapping is set up.
The parameters
.I map_from
and
.I map_to
may need quoting to be correctly passed to the mapping engine.
.LP
Call
.BI "map \-u" " map_from
to unmap an existing mapping.
The parameter
.I map_from
needs quoting for both the input mapper and the shell
to be correctly passed to the mapping engine.
.LP
For more information and for escape sequences known by the mapper
see the section
.B "History Editing Input Mappings
below.
The
.B map
command was not supported in older versions of
.BR sh .
.RE

.br
.ne 3
.TP
\fBnewgrp\fR [ \fIargument\fR ]
.sp .6
Equivalent to
.BI "exec newgrp " argument\fR.
See
.BR newgrp (1)
for usage and description.

.br
.ne 3
.TP
\fBpopd\fR [ \fI\-offset\fR ]
.sp .6
Calling
.B popd
without argument removes the current top directory stack element
from the directory stack and then performs a
.B cd
to the new top directory stack element.
Calling
.B popd
with an
.I offset
argument removes the current the top directory stack element
from the directory stack, them removes the directory stack element
named by
.I offset
from the current directory stack, makes it
the new top directory stack element and performs a
.B cd
to this directory.
If the new directory stack has more than one element, it is printed.
See
.B dirs
for an explanation of
.IR offset .
The
.B popd
command was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
\fBpushd\fR [ \fIname\fR ]
.PD 0
.TP
\fBpushd\fR [ \fI\-offset\fR ]
.PD
.sp .6
The
.B pushd
command is similar to the
.B cd
command, but it keeps the previous working directory on the directory stack.
If
.I \-offset
is used instead of a directory
.IR name ,
it exchanges the content of the
top directory stack element with the directory stack element named by
.I offset
and then performs a
.B cd
to the new top directory stack element.
If the new directory stack has more than one element, it is printed.
See
.B dirs
for an explanation of
.IR offset .
The
.B pushd
command was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
.B pwd
.sp .6
Print the current working directory. See
.BR pwd (1)
for usage and description.
The current working directory is kept in the shell parameter
.BR PWD .

.br
.ne 3
.TP
\fBread\fR [ \fB\-r\fR ] \fIname\fR .\|.\|.
.sp .6
One line is read from the standard input and, using the internal field
separator,
.B IFS
(normally space or tab), to delimit word boundaries,
the first word is assigned to the first
.IR name ,
the second word to the second
.IR name ,
and so forth, with leftover words assigned to the last
.IR name .
Lines can be continued using
.BR \enewline \&.
Characters other than
.B newline
can be quoted by preceding them with a backslash. These
backslashes are removed before words are assigned to
.IR names ,
and no interpretation is done on the character that follows the backslash. The
return code is
.BR 0 ,
unless an
.B EOF
is encountered.
.RS
.TP
.B \-r
Do not treat a
.B backslash
character in any special way.
Consider each
.B backslash
to be part of the input line.
The option
.B \-r
was not supported in older versions of
.BR sh .
.RE

.br
.ne 3
.TP
\fBreadonly\fR [ \fIname\fR .\|.\|. ]
.sp .6
The given
.IR name s
are marked
.B readonly
and the values of the these
.IR name s
can not be changed by subsequent assignment. If no arguments are
given, a list of all
.B readonly
names is printed.

.br
.ne 3
.TP
\fBrepeat\fR [ \fB\-c \fIcount\fR ] [ \fB\-d \fIdelay\fR ] \fIcommand\fR [ \fIargs\fR ]
.sp .6
The command
.I command
is executed repeatedly as if it was called via
.BR eval .
If the
.B \-c
option is present,
.I command
is repeated
.I count
times, otherwise execution is repeated forever.
If the
.B \-d
option is present,
.B sh
waits
.I delay
seconds before
.I command
is executed again, otherwise there is no delay between executions.
The
.B repeat
command was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
\fBreturn\fR [ \fIn\fR ]
.sp .6
Causes a function to exit with the return value specified by
.IR n .
If
.I n
is omitted, the return status is that of the last command
executed.

.br
.ne 3
.TP
.B savehistory
.sp .6
Save the current history in the file
.BR $HOME/.history .
The
.B savehistory
command was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
\fBset\fR [ \fB\-aefhkmntuvxP\fR [ \fIargument\fR .\|.\|. ] ]
.sp .6
.RS
.br
.ne 3
.TP 6n
.B \-a
Mark variables which are modified or created for export.

.br
.ne 3
.TP
.B \-e
Exit immediately if a command exits with a non-zero exit status.

.br
.ne 3
.TP
.B \-f
Disable file name generation.

.br
.ne 3
.TP
.B \-h
Locate and remember function commands as functions are defined (function
commands are normally located when the function is executed).

.br
.ne 3
.TP
.B \-k
All keyword arguments are placed in the environment for a command, not just
those that precede the command name.

.br
.ne 3
.TP
.B \-m
Switch job control mode on.

.br
.ne 3
.TP
.B \-n
Read commands but do not execute them.
Setting
.B \-n
in an interactive shell is ignored as this could not be undone and the shell
could not even be terminated anymore.

.br
.ne 3
.TP
.B \-t
Exit after reading and executing one command.

.br
.ne 3
.TP
\fB\-o\fR [\fIoption\fR]
If
.I option
is not specified, list the current option setting to stdout;
when invoked with
.B +o
instead of
.BR \-o ,
the output is written in a format that is suitable to reinput to the
shell to restore the current setting.
When invoked with
.B +o
and with
.I option
argument, the related option is cleared.
The
.B +o
option may be repeated to enable or disable multiple options.
The value of
.I option
must be one of the following:
.RS
.TP 15
.PD 0
.B allexport
Equivalent to
.BR \-a .
.TP
.BI aliasowner= name
Set an alternate trusted owner for the files
.B $HOME/.globals
and
.BR .locals .
By default, the shell ignores alias files if they are not
owned by the current shell user. This option allows to set up
an alternate file owner that is accepted. Setting the alternate
owner to the empty string disables the feature.
.TP
.B errexit
Equivalent to
.BR \-e .
.TP
.B globalaliases
Enables/disables persistent global aliases that are read from the file
.BR $HOME/.globals .
Changing the state for this option first removes all current global aliases.
If the new state is
.BR on ,
the persistent global aliases are loaded.
.TP
.B hashall
Equivalent to
.BR \-h .
.TP
.B interactive
Equivalent to
.BR \-i .
.TP
.B keyword
Equivalent to
.BR \-k .
.TP
.B localaliases
Enables/disables persistent directory local aliases that are read from the file
.B .locals
in the current directory.
Local aliases are specific to the current working directory.
Changing the state for this option first removes all current local aliases.
If the new state is
.BR on ,
the persistent local aliases are loaded from the current directory.
.TP
.B monitor
Equivalent to
.BR \-m .
.TP
.B noexec
Equivalent to
.BR \-n .
.TP
.B noglob
Equivalent to
.BR \-f .
.TP
.B nounset
Equivalent to
.BR \-u .
.TP
.B onecmd
Equivalent to
.BR \-t .
.TP
.B pfsh
Equivalent to
.BR \-P .
.TP
.B privileged
Equivalent to
.BR \-p .
.TP
.B restricted
Equivalent to
.BR \-r .
.TP
.B stdin
Equivalent to
.BR \-s .
.TP
.B verbose
Equivalent to
.BR \-v .
.TP
.B ved
Allow shell command line editing using the built in
.B ved
editor.
.TP
.B vi
Allow shell command line editing using the built in
.B vi
editor.
The Bourne Shell currently does not allow to set the vi mode
for any type of terminal.
.TP
.B xtrace
Equivalent to
.BR \-x .
.PD
.RE

.br
.ne 3
.TP
.B \-u
Treat unset variables as an error when substituting.

.br
.ne 3
.TP
.B \-v
Print shell input lines as they are read.

.br
.ne 3
.TP
.B \-x
Print commands and their arguments as they are executed.

.br
.ne 5
.TP
.B \-P
Switch profile mode on.
In this mode, the shell runs privilleged programs automatically in
privilleged mode.
See
.BR pfexec (1)
for further information.
This feature is only supported on Solaris 10 and above.
The option
.B \-P
was not supported in older versions of
.BR sh .

.br
.ne 3
.TP
.B \-
Clear the
.B \-v
and
.B \-x
option.

.br
.ne 3
.TP
\fB\-\-\fR
Stop option processing.
Further parameters are handled as normal args even when they start with a
.BR \- .
.LP
Using
.B +
rather than
.B \(mi
causes these flags to be turned off.
These flags can also be used upon invocation of the shell.
The flags
.BR \-c ,
.BR \-i ,
.BR \-p ,
.B \-r
and
.B \-s
can only be set upon invocation of the shell, they cannot be modified
using the
.B set
command.
The current set of flags can be found in
.BR $\(mi .
The remaining arguments are positional
parameters and are assigned, in order, to
.BR $1 ,
.BR $2 ,
\&.\|.\|. If no arguments are given, the values of all names are printed.
.RE

.br
.ne 3
.TP
\fBshift\fR [ \fIn\fR ]
.sp .6
The positional parameters from
.BI $ n +1
\&.\|.\|. are renamed
.B $1
\&.\|.\|. . If
.I n
is not given, it is assumed to be 1.

.br
.ne 3
.TP
\fBstop\fR \fIpid .\|.\|.\fR
.sp .6
Halt execution of the process number
.IR pid .
(see
.BR ps (1)).

.br
.ne 3
.TP
.B suspend
.sp .6
Stops the execution of the current shell (but not if it is the login
shell).

.br
.ne 3
.TP
.BI test " [expr]
.sp .6
Evaluate conditional expressions. See
.BR test (1)
for usage and description. If the value of the expression
.IR expr ,
is
.B true
then
.B test
returns zero exit status;
otherwise, a non zero exit status is returned.
.B test
returns a non zero exit status if there are no arguments.
.sp
The following primaries are used to evaluate a
.IR condition:
.RS
.br
.ne 3
.TP 10
.BI \-b " file
.B True
if
.I file
exists and is a block special file.
.PD 0
.br
.ne 3
.TP
.BI \-c " file
.B True
if
.I file
exists and is a character special file.
.br
.ne 3
.TP
.BI \-d " file
.B True
if
.I file
exists and is a directory.
.br
.ne 3
.TP
.BI \-f " file
.B True
if
.I file
exists and is a regular file.
Alternatively, if
.B Bourne Shell
users specify
.B /usr/ucb
before
.B /usr/bin
in their
.B PATH
environment variable, then
.B test
returns
.B true
if file exists and is
.RB ( not-a-directory ).
.br
.ne 3
.TP
.BI \-g " file
.B True
if
.I file
exists and its
.B set group ID
flag is set.
.br
.ne 3
.TP
.BI \-h " file
.B True
if
.I file
exists and is a symbolic link.
.br
.ne 3
.TP
.BI \-k " file
.B True
if
.I file
exists and has its
.B set sticky bit
set.
.br
.ne 3
.TP
.BI \-L " file
.B True
if
.I file
exists and is a symbolic link.
.br
.ne 3
.TP
.BI \-n " string
.B True
if the length of
.I string
is non-zero.
.br
.ne 3
.TP
.BI \-p " file
.B True
if
.I file
exists and is a named pipe
.RB ( FIFO ).
.br
.ne 3
.TP
.BI \-r " file
.B True
if
.I file
exists and is readable.
.br
.ne 3
.TP
.BI \-s " file
.B True
if
.I file
exists and has a size greater then zero.
.br
.ne 3
.TP
.BI \-t " [file-descriptor]
.B True
if the file whose file descriptor number is
.I file-descriptor
is open and is associated with a terminal.
If
.I file-descriptor
is not specified,
.B 1
is used as a default value.
.br
.ne 3
.TP
.BI \-u " file
.B True
if
.I file
exists and its
.B set user ID
flag is set.
.br
.ne 3
.TP
.BI \-w " file
.B True
if
.I file
exists and is writable.
.br
.ne 3
.TP
.BI \-x " file
.B True
if
.I file
exists and is executable.
True indicates only that the execute flag is on.
If file is a directory, true indicates that file can be searched.
.br
.ne 3
.TP
.BI \-z " string
.B True
if the length of
.I string
is zero.
.sp
.ne 3
.TP
.I string
.B True
if
.I string
is not the null string.
.br
.ne 3
.TP
.IB s1 " = " s2
.B True
if the strings
.I s1
and
.I s2
are identical.
.br
.ne 3
.TP
.IB s1 " != " s2
.B True
if the strings
.I s1
and
.I s2
are not identical.
.br
.ne 3
.TP
.IB n1 " \-eq " n2
.B True
if the integers
.I n1
and
.I n2
are algebraically equal.
.br
.ne 3
.TP
.IB n1 " \-ne " n2
.B True
if the integers
.I n1
and
.I n2
are not algebraically equal.
.br
.ne 3
.TP
.IB n1 " \-gt " n2
.B True
if the integer
.I n1
is algebraically greater than the integer
.IR n2 .
.br
.ne 3
.TP
.IB n1 " \-ge " n2
.B True
if the integer
.I n1
is algebraically greater or equal to the integer
.IR n2 .
.br
.ne 3
.TP
.IB n1 " \-lt " n2
.B True
if the integer
.I n1
is algebraically less than the integer
.IR n2 .
.br
.ne 3
.TP
.IB n1 " \-le " n2
.B True
if the integer
.I n1
is algebraically less or equal to the integer
.IR n2 .
.PD
.LP
The primaries above may be combined with the following operators:
.br
.ne 3
.TP 10
.BI ( " expr " )
Bracketing to group precedence.
.br
.ne 3
.PD 0
.TP
.B !
unary negation operator.
.br
.ne 3
.TP
.B \-a
binary
.B and
operator.
The
.B \-a
binary primary is left associative and has higher precedence than the
.B \-o
binary primary.
.br
.ne 3
.TP
.B \-o
binary
.B or
operator.
The
.B \-o
binary primary is left associative.
.PD
.RE

.br
.ne 3
.TP
.B times
.sp .6
Print the accumulated user and system times for processes run from the
shell.

.br
.ne 3
.TP
\fBtrap\fR [ [\fIargument\fR] \fIn\fR [ \fIn2\fR .\|.\|. ]]
.sp .6
The command
.I argument
is to be read and executed when the shell
receives numeric or symbolic signal(s)
.RI ( n ).
.RB ( Note:
.I argument
is scanned once when the trap is set and once when the trap
is taken.) Trap commands are executed in order of signal number or
corresponding symbolic names. Any attempt to set a trap on a signal that was
ignored on entry to the current shell is ineffective. An attempt to trap on
signal 11 (memory fault) produces an error. If
.I argument
is absent, all trap(s)
.I n
are reset to their original values. If
.I argument
is the
null string, this signal is ignored by the shell and by the commands it
invokes. If
.I n
is 0, the command
.I argument
is executed on exit
from the shell. The
.B trap
command with no arguments prints a list of
commands associated with each signal number.

.br
.ne 3
.TP
\fBtrue\fR
.sp .6
The
.B true
builtin
does nothing. A zero exit code is returned.

.br
.ne 4
.TP
\fBtype\fR [ \fIname\fR .\|.\|. ]
.sp .6
For each
.IR name ,
indicate how it would be interpreted if used as a command name.

.br
.ne 3
.TP
\fBulimit\fR [ [\fB\-HS\fR] [\fB\-a\fR | \fB\-cdflmnstuv\fR] ]
.PD 0
.TP
\fBulimit\fR [ [\fB\-HS\fR] [\fB\-c\fR|\fB\-d\fR|\fB\-f\fR|\fB\-l\fR|\fB\-m\fR|\fB\-n\fR|\fB\-s\fR|\fB\-t\fR|\fB\-u\fR|\fB\-v\fR] ] \fBlimit\fR
.PD
.sp .6
.B ulimit
prints or sets hard or soft resource limits. These limits are
described in
.BR getrlimit (2).
.sp
If
.I limit
is not present,
.B ulimit
prints the specified limits.
Any number of limits can be printed at one time. The
.B \-a
option prints all limits.
.sp
If
.I limit
is present,
.B ulimit
sets the specified limit to
.IR limit .
The string
.B unlimited
requests that the current limit, if
any, be removed. Any user can set a soft limit to any value less than or
equal to the hard limit. Any user can lower a hard limit. Only a user
with appropriate privileges can raise or remove a hard limit. See
.BR getrlimit (2).
.sp
The
.B \-H
option specifies a hard limit. The
.B \-S
option specifies a
soft limit. If neither option is specified,
.B ulimit
sets both limits and print the soft limit.
.sp
The following options specify the resource whose limits are to be printed
or set. If no option is specified, the file size limit is printed or set.
.RS
.br
.ne 3
.TP
.B \-c
maximum core file size (in 512-byte blocks)
.br
.ne 3
.TP
.B \-d
maximum size of data segment or heap (in kbytes)
.br
.ne 3
.TP
.B \-f
maximum file size (in 512-byte blocks)
.br
.ne 3
.TP
.B \-l
maximum size of locked memory (in kbytes)
.br
.ne 3
.TP
.B \-m
maximum resident set size (in kbytes)
.br
.ne 3
.TP
.B \-n
maximum file descriptor plus 1
.br
.ne 3
.TP
.B \-s
maximum size of stack segment (in kbytes)
.br
.ne 3
.TP
.B \-t
maximum CPU time (in seconds)
.br
.ne 3
.TP
.B \-u
maximum number of child processes
.br
.ne 3
.TP
.B \-v
maximum size of virtual memory (in kbytes)
.LP
Not all resources are supported on all platforms.
.LP
Run the
.BR sysdef (1M)
command to obtain the maximum possible limits for
your system. The values reported are in hexadecimal, but can be translated
into decimal numbers using the
.BR bc (1)
utility. See
.BR swap (1M).)
.sp
As an example of
.BR ulimit ,
to limit the size of a core file dump to 0
Megabytes, type the following:
.sp
.in +2
.nf
.B ulimit \-c 0
.fi
.in -2
.sp

.RE

.br
.ne 3
.TP
\fBumask\fR [ \fI\-S\fR ] [ \fImask\fR ]
.sp .6
The user file-creation mask is set to
.I mask
(see
.BR umask (1)).
The mask may either be an octal numner or a symbolic notation (see
.BR chmod (1)).
If the symbolic notation for
.I mask
starts with a
.B \-
sign, it must be preceded with
.B \-\-
to keep it from being interpreted as an option.
The command
.B "umask\ \-\-\ \-w"
sets the file-creation mask so that subsequently created files
have all their write bits cleared.
.sp
If
.I mask
is omitted, the current value of the mask is printed.
.sp
Do not use a symbolic
.I mask
or
.B \-S
in Bourne Shell scripts that should be portable to older revisions.
.RS
.TP
.B \-S
Print the current file-creation mask in symbolic form.
The output is suitable as argument for the
.B umask
command.
.LP
The symbolic mode was not supported in older versions of
.BR sh .
.RE

.br
.ne 3
.TP
.B "unalias \fR[\fI options \fR] [\fIalias-name\fR...]
.sp .6
The
.B unalias
command removes existing alias definitions.
.sp
The
.B unalias
command in the Bourne Shell supports temporary aliases (POSIX aliases)
that affect only the current execution environment as well as
persistent aliases that affect all interactive shells that are called after a
persistent alias definition was entered or modified.
.sp
.sp
When operating on temporary aliases (i.e. when neither
.B \-g
nor
.B \-l
have been specified), all alias definitions for a specified
.I alias-name
are popped from the existing global definitions. No alias definition for the
specified
.I alias-name
remains active, but the file with persistent alias definitions is not touched.
This makes
.B unalias
compatible to the POSIX standard and able to support persistent aliases at the
same time.
The following options may be used to modify operation:
.RS
.TP
.B \-a
Remove all alias definitions from the current shell execution environment.
No arguments are permitted with this option.
As the persistent definitions are not touched, the persistent aliases
may be restored by calling
.BR "alias \-r" .
.TP
.B \-g
Pop a single alias definition for
.I alias-name
from the global aliases.
If the related alias definition is the last for
.I alias-name
(use
.BI "alias \-p \-g" " alias-name
to verify), remove it from the persistent global aliases that are stored
in the file
.B $HOME/.globals
and read by interactive shells.
.TP
.B \-l
Pop a single alias definition for
.I alias-name
from the local aliases.
If the related alias definition is the last for
.I alias-name
(use
.BI "alias \-p \-l" " alias-name
to verify), remove it from the persistent local aliases that are stored
in the file
.B .locals
in the current directory and read by interactive shells.
.TP
.B \-p
When removing aliases,
enforce a
.B pop all
operation even if the option
.B \-g
or
.B \-l
has been specified.
In
.B pop all
mode, all alias definitions for a specified
.I alias-name
are popped from the existing definitions. No alias definition for the
specified
.I alias-name
remains active, but the file with persistent alias definitions is not touched.
.RE

.br
.ne 3
.TP
\fBunset\fR [ \fIname\fR .\|.\|. ]
.sp .6
For each
.IR name ,
remove the corresponding variable or function value. The variables
.BR PATH ,
.BR PS1 ,
.BR PS2 ,
.BR MAILCHECK ,
and
.B IFS
cannot be unset.

.br
.ne 3
.TP
\fBwait\fR [ \fIn\fR ]
.sp .6
Wait for your background process whose process id is
.I n
and report its
termination status. If
.I n
is omitted, all your shell's currently active
background processes are waited for and the return code is zero.

.SS "Job Control (jsh)"
.sp
.LP
When the shell is invoked as
.BR jsh ,
Job Control is enabled in addition
to all of the functionality described previously for
.BR sh .
Typically,
Job Control is enabled for the interactive shell only. Non-interactive
shells typically do not benefit from the added functionality of Job
Control.
.sp
.LP
With Job Control enabled, every command or pipeline the user enters at the
terminal is called a
.IR job .
All jobs exist in one of the following
states: foreground, background, or stopped. These terms are defined as
follows:
.RS +4
.TP
1.
A job in the foreground has read and write access to the controlling
terminal.
.RE
.RS +4
.TP
2.
A job in the background is denied read access and has conditional write
access to the controlling terminal (see
.BR stty (1)).
.RE
.RS +4
.TP
3.
A stopped job is a job that has been placed in a suspended state, usually
as a result of a
.B SIGTSTP
signal (see
.BR signal.h (3HEAD)).
.RE
.sp
.LP
Every job that the shell starts is assigned a positive integer, called a
.I job number
which is tracked by the shell and is used as an identifier
to indicate a specific job. Additionally, the shell keeps track of the
.I current
and
.I previous
jobs. The
.I current job
is the most recent job to be started or restarted. The
.I previous job
is the first non-current job.
.sp
.LP
The acceptable syntax for a Job Identifier is of the form:
.sp
.LP
.BI % jobid
.sp
.LP
where
.I jobid
can be specified in any of the following formats:
.br
.ne 3
.TP 13n
.BR "% " or " +"
For the current job.

.br
.ne 3
.TP
.B \(mi
For the previous job.

.br
.ne 3
.TP
.BI ? <string>
Specify the job for which the command line uniquely contains
.IR string .

.br
.ne 3
.TP
.I n
For job number
.IR n .

.br
.ne 3
.TP
.I pref
Where
.I pref
is a unique prefix of the command name. For example, if
the command
.BI "ls \-l" " name
were running in the background, it
could be referred to as
.BR %ls .
.I pref
cannot contain blanks unless it is quoted.

.sp
.LP
When Job Control is enabled, the following commands are added to the user's
environment to manipulate jobs:
.br
.ne 3
.TP 4n
\fBbg\fR [\fB%\fIjobid .\|.\|.\fR]
.sp .6
Resumes the execution of a stopped job in the background. If
.BI % jobid
is omitted the current job is assumed.

.br
.ne 3
.TP
\fBfg\fR [\fB%\fIjobid .\|.\|.\fR]
.sp .6
Resumes the execution of a stopped job in the foreground, also moves an
executing background job into the foreground. If
.BI % jobid
is omitted the current job is assumed.

.br
.ne 3
.TP
\fBjobs\fR [\fB\-p\fR|\fB\-l\fR] [\fB%\fIjobid .\|.\|.\fR]
.PD 0
.TP
\fBjobs\fR \fB\-x\fR \fBcommand\fR [\fIarguments\fR]
.PD
.sp .6
Reports all jobs that are stopped or executing in the background. If
.BI % jobid
is omitted, all jobs that are stopped or running in the
background is reported. The following options modify/enhance the output of
.BR jobs :
.RS
.br
.ne 3
.TP 6n
.B \-l
Report the process group ID and working directory of the jobs.

.br
.ne 3
.TP
.B \-p
Report only the process group ID of the jobs.

.br
.ne 3
.TP
.B \-x
Replace any
.I jobid
found in
.I command
or
.I arguments
with the
corresponding process group ID, and then execute
.I command
passing it
.IR arguments .
.RE

.br
.ne 3
.TP
\fBkill\fR [ \fB\-signal\fR ] \fB%\fIjobid\fR
.sp .6
Builtin version of
.B kill
to provide the functionality of the
.B kill
command for processes identified with a
.IR jobid .

.br
.ne 3
.TP
\fBstop\fR \fB%\fIjobid .\|.\|.\fR
.sp .6
Stops the execution of a background job(s).

.br
.ne 3
.TP
.B suspend
.sp .6
Stops the execution of the current shell (but not if it is the login
shell).

.br
.ne 3
.TP
\fBwait\fR [\fB%\fIjobid .\|.\|.\fR]
.sp .6
.B wait
builtin accepts a job identifier. If
.BI % jobid
is omitted
.B wait
behaves as described above under
.BR "Special Commands" .

.SS "Command History Editing"
.LP
If compiled with
.BR \-DINTERACTIVE ,
the
.B Bourne Shell
includes a command line history and a command line editor.
The behavior of the command line editor is the same as introduced in 1984 with
.BR bsh (1)
and has been inspired by the behavior of the editor
.BR ved (1).
.LP
The history is implemented as limited ring buffer.
The size of the ring buffer is in
.BR HISTORY .
If
.B HISTORY
is unset or set to 
.BR 0 ,
the current command line history is lost and
command line editing is only supported on the current line and
this line is not kept in the history.
Command line editing may be turned off completely by issuing the command
.RB ` "set +o ved" '.
The existing history is not affected by turning off the command line editor.
.LP
Command lines from the existing history may be retrieved with the cursor keys
.RB ( "Cursor up " and " Cursor down" ).
Typing
.B <CR>
or
.B <LF>
executes the command on the line with the cursor.
.LP
Each new command is appended to the end of the history.
If the maximum size of the history is reached, the oldest command is removed.
Identical commands are avoided as far as possible.
If an command is entered that is already in the history, it is moved to the
end of the history.
.SS "History Editing Commands"
.LP
The following commands allow to edit a command line:
.TP 10
.B ^H
Move cursor one character to the left.
.TP
.B ^F
Move cursor one character to the right.
.TP
.B ^D
Erase the character under the cursor.
.TP
.B DEL
Erase one character to the left of the cursor.
.TP
.B ^U
Erase the whole line.
.TP
.B ^^
Quote next character.
.TP
.B CR
Finish current line and execute it.
.TP
.B NL
Finish current line and execute it.
.TP
.B TAB
Do file name completion for the word to the left side of the cursor.
If more than one file matches the current partial filename, a
.B BEEP
is generated.
Typing a second
.B TAB
displays a list of matching names.
.TP
.B ESC- ^H
Move cursor one word to the left.
.TP
.B ESC- ^F
Move cursor one word to the right.
.TP
.B ESC- ^D
Erase the word under the cursor to the right.
.TP
.B ESC- DEL
Erase the word to the left of the cursor.
.LP
The following commands are available to navigate within the history:
.TP 10
.B ^P
Move cursor to the previous history line.
.TP
.B ^N
Move cursor to the next history line.
.TP
.B ESC- ^P
Search backwards in the history.
The user is prompted for a search pattern.
The previous search string is kept and may be edited.
To enter a new search string, first type
.BR ^U .
.TP
.B ESC- ^N
Search forwards in the history.
The user is prompted for a search pattern.
The previous search string is kept and may be edited.
To enter a new search string, first type
.BR ^U .
.TP
.B ESC- p
Search backwards in the history.
Clear the old search pattern first.
.TP
.B ESC- n
Search forwards in the history.
Clear the old search pattern first.
.TP
.B ESC- CR
Return to the history line that was in use before the last search command.
.LP
Other characters are inserted into the command line text.
Characters that are listed above as being edit command characters need to be
quoted using the quote character
.BR ^^ .
If a line is entered via
.B CR
or
.BR NL ,
the current position of the cursor is irrelevant.
.LP
The command line editor remembers the cursor position for each command line
in the history during the lifetime of the shell process.
.SS "History Editing Input Mappings"
.LP
The command line history editor maps input from the terminal into mapped text
before it is interpreted by the editor. If a match is found on the input
from the terminal, the related input text is directly replaced by it's
replacement string.
A mapping may be prevented by typing the map quote character which is the
.B nul
character
.RB ( ^@ ),
directly before the matching text is entered.
.LP
At startup (directly before the first shell command prompt is shown),
the command line history editor first tries to initialize the
terminal setup using the variables
.BR HOME ,
.BR TERM ,
.B TERMCAP
and
.BR TERMPATH .
Then it tries to read the file
.B $HOME/.bshmap
to retrieve additional mappings.
.LP
If
.B TERM
is not set, the mapper establishes standard mappings for the cursor keys
assuming an ANSI-compatible terminal.
.LP
Each line in the file
.B $HOME/.bshmap
has the following structure:
.LP
.IB "  map_from" : map_to : comment
.LP
.I map_from
is the string that is going to be replaced in the input,
.I map_to
is the string replacement and
.I comment
is optional comment that is not used for mapping itself.
If both
.I map_from
and
.I map_to
are empty, the related line is ignored by the mapper, so a line may contain:
.LP
.BI "  ::" comment
.LP
The maximum length of
.I map_from
is 16 characters,
the maximum length of
.I map_to
is 128 characters.
Each entry takes exactly one line in the file.
A
.B nul character
in either
.I map_from
or
.I map_to
is currently not supported.
.LP
Control characters may be written using the same escape sequences as permitted
with
.BR TERMCAP .
.LP
The builtin
.B map
command may be used to enter additional maps at runtime.
.LP
As the
.B nul character
is the quote character of the mapper, enter two
.B nul characters
to get one
.B nul character
in the edit input.
To enter a mapped string (such as cursor key output), first enter the
quote character of the command line history editor
.RB ( ^ ),
then enter
.B nul character
and finally the otherwise mapped text.

.SS Termcap
.LP
The
.B termcap
data base is used to make the command history editor independent
from the terminal capabilities. Cursor key output is retrieved from
the data base and mapped to the cursor movement commands of the
history editor.
.LP
.ne 5
The following variables are used by
.BR termcap:
.TP 10
.B HOME
To find the private files like
.BR $HOME/.termcap .
.TP
.B TERM
A name representing the type of the current terminal.
.TP
.B
TERMCAP
This environment variable holds either a precompiled
.B termcap
entry or the pathname to be used to find a
.BR "termcap database file" .
If it holds a precompiled entry that does not match the
.B TERM
environment, the termcap database is parsed as if the
.B TERMCAP
environment is not set.
See section
.B Parameter Substitution
above for more information.
.TP
.B TERMPATH
If
.B TERMCAP
is empty or not set, then the
.B TERMPATH
environment is
scanned for pathnames of files that contain a
.B termcap
database. It holds a list of filenames separated by
colons or spaces (i.e., ":" or " ").
See section
.B Parameter Substitution
above for more information.
.LP
.ne 6
The following escape sequences are understood by the
.B termcap
implementation used by
.BR sh :
.TP 8
.B \e\e
The literal character
.BR \e .
.PD 0
.TP
.B \eE
The
.B ESC
character (ASCII
.BR 033 ).
.TP
.B \ee
The
.B ESC
character (ASCII
.BR 033 ).
.TP
.B \e^
The literal character
.BR ^ .
.TP
.B \e:
The literal character
.BR : .
.TP
.B \e,
The literal character
.BR , .
.TP
.B \eb
The
.B BACKSPACE
character (ASCII
.BR 010 ).
.TP
.B \ef
The
.B FORMFEED
character (ASCII
.BR 014 ).
.TP
.B \el
The
.B LINEFEED
character (ASCII
.BR 012 ).
.TP
.B \en
The
.B NEWLINE
character (ASCII
.BR 012 ).
.TP
.B \er
The
.B CR
character (ASCII
.BR 015 ).
.TP
.B \es
The
.B SPACE
character (ASCII
.BR 040 ).
.TP
.B \et
The
.B TAB
character (ASCII
.BR 007 ).
.TP
.B \ev
The
.B VERTICAL TAB
character (ASCII
.BR 013 ).
.TP
.BI ^ c
Maps to
.BI control( c )
for any appropriate
.BR c .
.TP
.B ^?
The
.B DEL
character (ASCII
.BR 0177 ).
.TP
.BI \e nnn
Maps to a character with the octal representation
.I nnn
with 1..3 octal digits.
.TP
.B \e0
Maps to ASCII
.BR 0200 .
.TP
.B ^@
Maps to ASCII
.BR 00 .
.PD
.LP
Mapping
.B \e0
to ASCII
.B 0200
is required by the
.B termcap
documentation.
A real
.B nul character
created from
.RB ( ^@ )
is currently neither supported by the upper layers of
.BR termcap ,
nor by the upper layers of the mapper.

.SS "Large File Behavior"
.LP
The
.B Bourne Shell
is large file aware.
See
.BR largefile (5)
for an extended description of the behavior of
.B sh
and
.B jsh
when encountering files greater than or equal to 2 Gbyte ( 2^31 bytes).
.SH EXIT STATUS
.sp
.LP
Errors detected by the shell, such as syntax errors, cause the shell to
return a non-zero exit status. If the shell is being used non-interactively
execution of the shell file is abandoned. Otherwise, the shell returns the
exit status of the last command executed (see also the
.B exit
command above).
.SS "jsh Only"
.sp
.LP
If the shell is invoked as
.B jsh
and an attempt is made to exit the
shell while there are stopped jobs, the shell issues one warning:
.sp
.LP
.B There are stopped jobs.
.sp
.LP
This is the only message. If another exit attempt is made, and there are
still stopped jobs they are sent a
.B SIGHUP
signal from the kernel and
the shell is exited.
.SH FILES
.PD 0
.br
.ne 3
.TP 15
.B /etc/profile
The system initialization file, executed for login shells.
.br
.ne 3
.TP
.B /etc/sh.shrc
The system wide startup file, executed for interactive shells.
.br
.ne 3
.TP
.B $HOME/.profile
The personal initialization file, executed for login shells after
.BR /etc/profile .
.br
.ne 3
.TP
.B $HOME/.shrc
The personal initialization file, executed after
.BR /etc/sh.shrc ,
for interactive shells when
.B ENV
is not set.
.br
.ne 3
.TP
.B /etc/termcap
The system wide
.B TERMCAP
file.
.br
.ne 3
.TP
.B $HOME/.termcap
The personal
.B TERMCAP
file.
.br
.ne 3
.TP
.B $HOME/.bshmap
A file with hand-crafted cursor mappings for the history editor.
.br
.ne 3
.TP
.B $HOME/.history
File with the saved the history after logout.
.br
.ne 3
.TP
.B $HOME/.globals
File with persistent global alias definitions.
.br
.ne 3
.TP
.B .locals
File with persistent directory local alias definitions.
.br
.ne 3
.TP
.B /tmp/sh*
Used as temporary files for
.B here documents
(<< redirection).
.br
.ne 3
.TP
.B /dev/null
NULL device used as stdin for non job-control background jobs.
.br
.ne 3
.TP
.B /usr/lib/rsh
The location of the restricted Bourne Shell binary.
.PD
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.SS "/usr/bin/sh, /usr/bin/jsh"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
CSIEnabled
.TE

.br
.ne 7
.SH SEE ALSO
.nh
.sp
.LP
.BR Intro (1),
.BR bc (1),
.BR echo (1),
.BR getoptcvt (1),
.BR kill (1),
.BR bsh (1),
.BR ved (1),
.BR ksh (1),
.BR ksh93 (1),
.BR login (1),
.BR newgrp (1),
.BR pfsh (1),
.BR pfexec (1),
.BR ps (1),
.BR pwd (1),
.BR set (1),
.BR shell_builtins (1),
.BR stty (1),
.BR test (1),
.BR umask (1),
.BR wait (1),
.BR rsh (1M),
.BR su (1M),
.BR swap (1M),
.BR sysdef (1M),
.BR termcap (1),
.BR dup (2),
.BR exec (2),
.BR fork (2),
.BR pipe (2),
.BR ulimit (2),
.BR getrlimit (2),
.BR setrlimit (2),
.BR setlocale (3C),
.BR signal.h (3HEAD),
.BR passwd (4),
.BR profile (4),
.BR attributes (5),
.BR environ (5),
.BR largefile (5),
.BR XPG4 (5)
.hy 1
.SH WARNINGS
.sp
.LP
The use of
.B setuid
shell scripts is
.B strongly
discouraged.
.SH NOTES
.LP
For compatibility with the
.BR "Thompson shell" ,
.B ^
is a synonym for
.B |
as pipeline separator.
Do not use in new scripts.
.LP
Words used for filenames in input/output redirection are not interpreted
for filename generation (see
.B File Name Generation
section above). For example,
.B cat file1 >a*
creates a file named
.BR a* .
.sp
.LP
Because commands in pipelines are run as separate processes, variables set
in a pipeline have no effect on the parent shell.
.sp
.LP
If the input or the output of a
.B while
or
.B until
loop is
redirected, the commands in the loop are run in a sub-shell, and variables
set or changed there have no effect on the parent process:
.sp
.in +2
.nf
   lastline=
   while read line
   do

           lastline=$line
   done < /etc/passwd
   echo "lastline=$lastline"       # lastline is empty!
.fi
.in -2
.sp

.sp
.LP
In these cases, the input or output can be redirected by using
.BR exec ,
as in the following example:
.sp
.in +2
.nf
   # Save standard input (file descriptor 0) as file
   # descriptor 3, and redirect standard input from the file
   /etc/passwd:

   exec 3<&0               # save standard input as fd 3
   exec </etc/passwd       # redirect input from file

   lastline=
   while read line
   do
           lastline=$line
   done

   exec 0<&3               # restore standard input
   exec 3<&-               # close file descriptor 3
   echo "$lastline"        # lastline
.fi
.in -2
.sp

.sp
.LP
If you get the error message, "\c
.B "cannot fork, too many processes\c
", try using the
.BR wait (1)
command to clean up your background processes. If
this doesn't help, the system process table is probably full or you have too
many active foreground processes. There is a limit to the number of process
ids associated with your login, and to the number the system can keep track
of.
.sp
.LP
Only the last process in a pipeline can be waited for.
.sp
.LP
If a command is executed, and a command with the same name is installed in
a directory in the search path before the directory where the original
command was found, the shell continues to
.B exec
the original command.
Use the
.B hash
command to correct this situation.
.sp
.LP
The Bourne shell has a limitation on the effective
.B UID
for a process.
If this
.B UID
is less than 100 (and not equal to the real UID of the
process), then the
.B UID
is reset to the real UID of the process.
.sp
.LP
If not in
.B job control
mode, the shell implements both foreground and background jobs in the same
process group and they all receive the same signals, which can
lead to unexpected behavior. It is, therefore, recommended to switch on
.B job control
mode via
.B set \-m
in an interactive environment.
.LP
There is only one namespace for both functions and parameters.
A function definition will delete a parameter with the same name and vice-versa.
.LP
Parameter assignments that precede a special command affect the shell itself.
Parameter assignments that precede the call of a function are ignored.
.LP
This version of the Bourne Shell fixed the order of evaluation for
parameter assignements to be left to right instead of right to left (as
implemented in previous versions). This may cause scripts to fail if they
expect the old non-standard behavior.
.LP
When the shell executes a shell script that attempts to execute a
non-existent command interpreter, the shell returns an erroneous diagnostic
message that the shell script file does not exist.
