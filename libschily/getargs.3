. \"  Manual Seite fuer getargs
. \" @(#)getargs.3	1.1
. \"
.if t .ds a \v'-0.55m'\h'0.00n'\z.\h'0.40n'\z.\v'0.55m'\h'-0.40n'a
.if t .ds o \v'-0.55m'\h'0.00n'\z.\h'0.45n'\z.\v'0.55m'\h'-0.45n'o
.if t .ds u \v'-0.55m'\h'0.00n'\z.\h'0.40n'\z.\v'0.55m'\h'-0.40n'u
.if t .ds A \v'-0.77m'\h'0.25n'\z.\h'0.45n'\z.\v'0.77m'\h'-0.70n'A
.if t .ds O \v'-0.77m'\h'0.25n'\z.\h'0.45n'\z.\v'0.77m'\h'-0.70n'O
.if t .ds U \v'-0.77m'\h'0.30n'\z.\h'0.45n'\z.\v'0.77m'\h'-.75n'U
.if t .ds s \(*b
.if t .ds S SS
.if n .ds a ae
.if n .ds o oe
.if n .ds u ue
.if n .ds s sz
.TH GETARGS 3 "15. Juli 1988" "J\*org Schilling" "Schily\'s LIBRARY FUNCTIONS"
.SH NAME
getargs() \- parses arguments until a non-flag is reached
.SH SYNOPSIS
.nf
.B
int getargs(pac,pav,fmt,a1,\|.\|.\|.,an)
.B
	int *pac;       /* pointer to arg count */
.B
	char *(*pav)[]; /* pointer to address of arg vector */
.B
	char *fmt;      /* format string */
.B
	type *a1;       /* pointer to result 1 (corresponding */
.B
                        /* to the first descriptor in fmt) */
.B
	type *an;       /* pointer to result n (corresponding */
.B
                        /* to the nth descriptor in fmt) */
.fi
.SH DESCRIPTION
getargs() looks at each argument that begins with '-', '+', or
has an '=' in it and trys to find a matching description in fmt.
If a match is found, the corresponding value pointed at by a1 to
an is set to the value according to the conversion specification.
.PP
If a match is not found, getargs() returns the error code \-1, 
with *pav[0] pointing to the bad argument. If an argument that does 
not begin with '-' or '+' or contain an '=' is found, 
getargs() returns +1, again with av[0] pointing to the non-flag argument.
.PP
In the description, it is assumed that pac=&ac and pav=&av,
where ac and av are the two arguments passed to main(). The
pointers are necessary so that getargs() can update ac and av as
it verifies each argument and reflects the `current` position
back to the user.
.PP
Descriptors are composed of standard characters, which must
match, followed by a conversion character.
.PP
Legal conversions and their meanings are:
.TP
.BR #s " or " #S
Short integer
.RS
.PP
The remainder of the current argument, or if it is
empty, the next existing argument is converted to a
short integer value. An error in conversion results
in a NOMATCH situation.
.RE
.TP
.BR #l " or " #L
Long integer
.RS
.PP
The remainder of the current argument, or if it is
empty, the next existing argument is converted to a
long integer value. An error in conversion results
in a NOMATCH situation.
.RE
.TP
.BR #i " or " #I
Integer
.RS
.PP
The remainder of the current argument, or, if it is
empty, the next existing argument is converted to an
int value. An error in conversion results in a
NOMATCH situation.
.RE
.TP
.B ?
Character
.RS
.PP
The next character in the current argument is the
result. If there is no next char, the result is
'\\0'.
.RE
.TP
.B *
String
.RS
.PP
A pointer to the remainder of the current argument
is returned. If there are no more data in the
argument the next argument is used, and if there is
no next argument, a NOMATCH situation exists.
.RE
.TP
.B &
Function
.RS
.PP
The address argument is a pointer to a function to
call with a pointer to the current argument. The
function must return one of these values: YES = +1,
NOMATCH = \-1, ERROR = \-2.
.PP
Because the argument just after the address argument is passed
as a second argument to the function, common routines can have
their results in different places depending on which switch is
invoked.
.PP
Note: If a flag is found multiple times, the function is called
each time.
.RE
.PP
If no conversion is specified, the flag is assumed to be a
Boolean indicator and the corresponding value is set to TRUE
(+1).
.PP
Descriptors are separated by a ',' (without whitespace) in the
format string. They correspond in order to the resultant
pointers, a1\|.\|.\|.an.
.PP
It is an error to expect more than one conversion from a single
match (e.g., "x#*" to attempt to get both the numerical value
and the actual string for the x flag); a \-2 error will result if
this is attempted.
.PP
Although Boolean flags must appear exactly as they do in the
format string, the format string does not contain the leading
'-'. Flags, where conversion is to take place, may appear
either as:
.TP
.BI \-f value
.TP
.BI f= value
.TP
.BI f= " value"
.PP
where f is the matching flag string. No additional effort is
required to get these different ways of specifying values.
.SH RETURNS
.TP
.B +1
if an argument does not appear to be a flag.
.TP
.B 0
when all the arguments have been examined.
.TP
.B \-1
signifying a bad flag argument.
.TP
.B \-2
signifying a bad descriptor.

.SH EXAMPLES

.SH "SEE ALSO"

.SH NOTES
getargs() assumes the first argument is at av[0]. Commands are
invoked by the system with the command name in av[0] and the
first argument in av[1], so they must increment av and decrement
ac before calling getargs().
.PP
getargs() should only be used when the position of the switches
influences how an argument is processed (e.g., format and pr
commands), or when all switches must be before all the arguments
(e.g, write command). In other cases, use getallargs().

.SH BUGS
none

.SH AUTHOR
.nf
J\*org Schilling
Seestr. 110
D\-13353 Berlin
Germany
.fi
.PP
Mail bugs and suggestions to:
.PP
.B
schilling@fokus.gmd.de
or
.B
js@cs.tu\-berlin.de
or
.B
joerg@schily.isdn.cs.tu\-berlin.de
